// -------------------------------------------------------------
// 
// File Name: A:\internship\MATLAB\BLOCK_SEVEN_TAP_FILTER\BLOCK_SEVEN_TAP_FILTER\BLOCK_SEVEN_TAP_FILTER.v
// Created: 2022-12-13 23:58:48
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Y                             ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: BLOCK_SEVEN_TAP_FILTER
// Source Path: BLOCK_SEVEN_TAP_FILTER/BLOCK_SEVEN_TAP_FILTER
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module BLOCK_SEVEN_TAP_FILTER
          (clk,
           reset,
           clk_enable,
           h0,
           h1,
           h2,
           h3,
           h4,
           h5,
           h6,
           X,
           ce_out,
           Y);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [7:0] h0;  // uint8
  input   [7:0] h1;  // uint8
  input   [7:0] h2;  // uint8
  input   [7:0] h3;  // uint8
  input   [7:0] h4;  // uint8
  input   [7:0] h5;  // uint8
  input   [7:0] h6;  // uint8
  input   [7:0] X;  // uint8
  output  ce_out;
  output  [7:0] Y;  // uint8


  wire [7:0] DELAY_out1;  // uint8
  wire [7:0] DELAY1_out1;  // uint8
  wire [7:0] DELAY2_out1;  // uint8
  wire [7:0] DELAY3_out1;  // uint8
  wire [7:0] DELAY4_out1;  // uint8
  wire [7:0] DELAY5_out1;  // uint8
  wire [7:0] MUL1_out1;  // uint8
  wire [7:0] MUL6_out1;  // uint8
  wire [7:0] MUL5_out1;  // uint8
  wire [7:0] MUL4_out1;  // uint8
  wire [7:0] MUL3_out1;  // uint8
  wire [7:0] MUL2_out1;  // uint8
  wire [7:0] MUL_out1;  // uint8
  wire [7:0] TWO_BIT_ADDER_out1;  // uint8
  wire [7:0] TWO_BIT_ADDER1_out1;  // uint8
  wire [7:0] TWO_BIT_ADDER2_out1;  // uint8
  wire [7:0] TWO_BIT_ADDER3_out1;  // uint8
  wire [7:0] TWO_BIT_ADDER4_out1;  // uint8
  wire [7:0] TWO_BIT_ADDER5_out1;  // uint8


  DELAY u_DELAY (.clk(clk),
                 .reset(reset),
                 .enb(clk_enable),
                 .X_n(X),  // uint8
                 .X_n_1(DELAY_out1)  // uint8
                 );

  DELAY1 u_DELAY1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .X_n(DELAY_out1),  // uint8
                   .X_n_1(DELAY1_out1)  // uint8
                   );

  DELAY2 u_DELAY2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .X_n(DELAY1_out1),  // uint8
                   .X_n_1(DELAY2_out1)  // uint8
                   );

  DELAY3 u_DELAY3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .X_n(DELAY2_out1),  // uint8
                   .X_n_1(DELAY3_out1)  // uint8
                   );

  DELAY4 u_DELAY4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .X_n(DELAY3_out1),  // uint8
                   .X_n_1(DELAY4_out1)  // uint8
                   );

  DELAY5 u_DELAY5 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .X_n(DELAY4_out1),  // uint8
                   .X_n_1(DELAY5_out1)  // uint8
                   );

  MUL1 u_MUL1 (.A(DELAY_out1),  // uint8
               .B(h1),  // uint8
               .Y(MUL1_out1)  // uint8
               );

  MUL6 u_MUL6 (.A(DELAY5_out1),  // uint8
               .B(h6),  // uint8
               .Y(MUL6_out1)  // uint8
               );

  MUL5 u_MUL5 (.A(DELAY4_out1),  // uint8
               .B(h5),  // uint8
               .Y(MUL5_out1)  // uint8
               );

  MUL4 u_MUL4 (.A(DELAY3_out1),  // uint8
               .B(h4),  // uint8
               .Y(MUL4_out1)  // uint8
               );

  MUL3 u_MUL3 (.A(DELAY2_out1),  // uint8
               .B(h3),  // uint8
               .Y(MUL3_out1)  // uint8
               );

  MUL2 u_MUL2 (.A(DELAY1_out1),  // uint8
               .B(h2),  // uint8
               .Y(MUL2_out1)  // uint8
               );

  MUL u_MUL (.A(X),  // uint8
             .B(h0),  // uint8
             .Y(MUL_out1)  // uint8
             );

  TWO_BIT_ADDER u_TWO_BIT_ADDER (.A(MUL1_out1),  // uint8
                                 .B(MUL_out1),  // uint8
                                 .Y(TWO_BIT_ADDER_out1)  // uint8
                                 );

  TWO_BIT_ADDER1 u_TWO_BIT_ADDER1 (.A(MUL2_out1),  // uint8
                                   .B(TWO_BIT_ADDER_out1),  // uint8
                                   .Y(TWO_BIT_ADDER1_out1)  // uint8
                                   );

  TWO_BIT_ADDER2 u_TWO_BIT_ADDER2 (.A(MUL3_out1),  // uint8
                                   .B(TWO_BIT_ADDER1_out1),  // uint8
                                   .Y(TWO_BIT_ADDER2_out1)  // uint8
                                   );

  TWO_BIT_ADDER3 u_TWO_BIT_ADDER3 (.A(MUL4_out1),  // uint8
                                   .B(TWO_BIT_ADDER2_out1),  // uint8
                                   .Y(TWO_BIT_ADDER3_out1)  // uint8
                                   );

  TWO_BIT_ADDER4 u_TWO_BIT_ADDER4 (.A(MUL5_out1),  // uint8
                                   .B(TWO_BIT_ADDER3_out1),  // uint8
                                   .Y(TWO_BIT_ADDER4_out1)  // uint8
                                   );

  TWO_BIT_ADDER5 u_TWO_BIT_ADDER5 (.A(MUL6_out1),  // uint8
                                   .B(TWO_BIT_ADDER4_out1),  // uint8
                                   .Y(TWO_BIT_ADDER5_out1)  // uint8
                                   );

  assign Y = TWO_BIT_ADDER5_out1;

  assign ce_out = clk_enable;

endmodule  // BLOCK_SEVEN_TAP_FILTER


// -------------------------------------------------------------
// 
// File Name: A:\internship\MATLAB\DELAY_AND_ADD_BLOCK\DELAY_AND_ADD_BLOCK\DELAY_AND_ADD_BLOCK_tb.v
// Created: 2022-12-13 22:40:48
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Y                             ce_out        1
// Delayed                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DELAY_AND_ADD_BLOCK_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DELAY_AND_ADD_BLOCK_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire [7:0] rawData_X;  // uint8
  wire [7:0] rawData_h;  // uint8
  wire [7:0] rawData_Previous;  // uint8
  wire Delayed_done;  // ufix1
  wire rdEnb;
  wire Delayed_done_enb;  // ufix1
  reg [3:0] Y_addr;  // ufix4
  wire Delayed_lastAddr;  // ufix1
  wire resetn;
  reg  check2_done;  // ufix1
  wire Y_done;  // ufix1
  wire Y_done_enb;  // ufix1
  wire Y_active;  // ufix1
  reg [7:0] holdData_Previous;  // uint8
  reg [7:0] Previous_offset;  // uint8
  wire [7:0] Previous_1;  // uint8
  reg [7:0] holdData_h;  // uint8
  reg [7:0] h_offset;  // uint8
  wire [7:0] h_1;  // uint8
  reg [7:0] holdData_X;  // uint8
  reg [7:0] X_offset;  // uint8
  wire [7:0] X_1;  // uint8
  wire snkDone;
  wire snkDonen;
  wire tb_enb;
  reg  tb_enb_delay;
  wire ce_out;
  wire [7:0] Y;  // uint8
  wire [7:0] Delayed;  // uint8
  wire Y_enb;  // ufix1
  wire Y_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire [3:0] Y_addr_delay_1;  // ufix4
  reg signed [31:0] fp_Y_expected;  // sfix32
  reg [7:0] Y_expected;  // uint8
  reg signed [31:0] status_Y_expected;  // sfix32
  wire [7:0] Y_ref;  // uint8
  reg  Y_testFailure;  // ufix1
  wire [3:0] Delayed_addr_delay_1;  // ufix4
  reg signed [31:0] fp_Delayed_expected;  // sfix32
  reg [7:0] Delayed_expected;  // uint8
  reg signed [31:0] status_Delayed_expected;  // sfix32
  wire [7:0] Delayed_ref;  // uint8
  reg  Delayed_testFailure;  // ufix1
  wire testFailure;  // ufix1

  function real absReal(input real num);
  begin
    if (num < 0)
      absReal = -num;
    else
      absReal = num;
  end
  endfunction

  function real floatHalfToReal;
  input [15:0] x;
  reg [63:0] conv;

  begin
    conv[63] = x[15]; // sign 
    if (x[14:10] == 5'b0) // exp 
      conv[62:52] = 11'b0; 
    else
      conv[62:52] = 1023 + (x[14:10] - 15);
    conv[51:42] = x[9:0]; // mantissa 
    conv[41:0] = 42'b0;
    if (((x[14:10] == 5'h1F) && (x[9:0] != 10'h0))) // check for NaN 
    begin
      conv[63] = 1'b0;
      conv[62:52] = 11'h7FF;
      conv[51:0] = 52'h0;
    end
    floatHalfToReal = $bitstoreal(conv);
  end
  endfunction

  function real floatSingleToReal;
  input [31:0] x;
  reg [63:0] conv;

  begin
    conv[63] = x[31]; // sign 
    if (x[30:23] == 8'b0) // exp 
      conv[62:52] = 11'b0; 
    else
      conv[62:52] = 1023 + (x[30:23] - 127);
    conv[51:29] = x[22:0]; // mantissa 
    conv[28:0] = 29'b0;
    if (((x[30:23] == 8'hFF) && (x[22:0] != 23'h0))) // check for NaN 
    begin
      conv[63] = 1'b0;
      conv[62:52] = 11'h7FF;
      conv[51:0] = 52'h0;
    end
    floatSingleToReal = $bitstoreal(conv);
  end
  endfunction

  function real floatDoubleToReal;
  input [63:0] x;
  reg [63:0] conv;

  begin
    conv[63:0] = x[63:0]; 
    if (((x[62:52] == 11'h7FF) && (x[51:0] != 52'h0))) // check for NaN 
    begin
      conv[63] = 1'b0;
      conv[62:52] = 11'h7FF;
      conv[51:0] = 52'h0;
    end
    floatDoubleToReal = $bitstoreal(conv);
  end
  endfunction

  function isFloatEpsEqual(input real a, input real b, input real eps);
  real absdiff;

  begin
    absdiff = absReal(a - b);
    if (absdiff < eps) // absolute error check 
      isFloatEpsEqual = 1;
    else if (a == b) // check infinities 
      isFloatEpsEqual = 1; 
    else if (a*b == 0.0) // either is zero 
      isFloatEpsEqual = (absdiff < eps);
    else if (absReal(a) < absReal(b)) // relative error check
      isFloatEpsEqual = absdiff/absReal(b) < eps;
    else
      isFloatEpsEqual = absdiff/absReal(a) < eps;
  end
  endfunction
  function isFloatHalfEpsEqual;
  input [15:0] x;
  input [15:0] y;
  input real eps;
  real a, b;
  real absdiff;

  begin
    a = floatHalfToReal(x);
    b = floatHalfToReal(y);
    isFloatHalfEpsEqual = isFloatEpsEqual(a, b, eps);
  end
  endfunction
  function isFloatSingleEpsEqual;
  input [31:0] x;
  input [31:0] y;
  input real eps;
  real a, b;
  real absdiff;

  begin
    a = floatSingleToReal(x);
    b = floatSingleToReal(y);
    isFloatSingleEpsEqual = isFloatEpsEqual(a, b, eps);
  end
  endfunction
  function isFloatDoubleEpsEqual;
  input [63:0] x;
  input [63:0] y;
  input real eps;
  real a, b;
  real absdiff;

  begin
    a = floatDoubleToReal(x);
    b = floatDoubleToReal(y);
    isFloatDoubleEpsEqual = isFloatEpsEqual(a, b, eps);
  end
  endfunction

  // Data source for X
  assign rawData_X = 8'b00000001;



  // Data source for h
  assign rawData_h = 8'b00000001;



  // Data source for Previous
  assign rawData_Previous = 8'b00000000;



  assign Delayed_done_enb = Delayed_done & rdEnb;



  assign Delayed_lastAddr = Y_addr >= 4'b1010;



  assign Delayed_done = Delayed_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_2
      if (reset) begin
        check2_done <= 0;
      end
      else begin
        if (Delayed_done_enb) begin
          check2_done <= Delayed_done;
        end
      end
    end

  assign Y_done_enb = Y_done & rdEnb;



  assign Y_active = Y_addr != 4'b1010;



  // holdData reg for Constant2_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Constant2_out1
      if (reset) begin
        holdData_Previous <= 8'bx;
      end
      else begin
        holdData_Previous <= rawData_Previous;
      end
    end

  always @(rawData_Previous or rdEnb)
    begin : stimuli_Constant2_out1_1
      if (rdEnb == 1'b0) begin
        Previous_offset <= holdData_Previous;
      end
      else begin
        Previous_offset <= rawData_Previous;
      end
    end

  assign #2 Previous_1 = Previous_offset;

  // holdData reg for Constant1_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Constant1_out1
      if (reset) begin
        holdData_h <= 8'bx;
      end
      else begin
        holdData_h <= rawData_h;
      end
    end

  always @(rawData_h or rdEnb)
    begin : stimuli_Constant1_out1_1
      if (rdEnb == 1'b0) begin
        h_offset <= holdData_h;
      end
      else begin
        h_offset <= rawData_h;
      end
    end

  assign #2 h_1 = h_offset;

  // holdData reg for Constant_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Constant_out1
      if (reset) begin
        holdData_X <= 8'bx;
      end
      else begin
        holdData_X <= rawData_X;
      end
    end

  always @(rawData_X or rdEnb)
    begin : stimuli_Constant_out1_1
      if (rdEnb == 1'b0) begin
        X_offset <= holdData_X;
      end
      else begin
        X_offset <= rawData_X;
      end
    end

  assign #2 X_1 = X_offset;

  assign snkDonen =  ~ snkDone;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (snkDone == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  DELAY_AND_ADD_BLOCK u_DELAY_AND_ADD_BLOCK (.clk(clk),
                                             .reset(reset),
                                             .clk_enable(clk_enable),
                                             .X(X_1),  // uint8
                                             .h(h_1),  // uint8
                                             .Previous(Previous_1),  // uint8
                                             .ce_out(ce_out),
                                             .Y(Y),  // uint8
                                             .Delayed(Delayed)  // uint8
                                             );

  assign Y_enb = ce_out & Y_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 10
  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        Y_addr <= 4'b0000;
      end
      else begin
        if (Y_enb) begin
          if (Y_addr >= 4'b1010) begin
            Y_addr <= 4'b0000;
          end
          else begin
            Y_addr <= Y_addr + 4'b0001;
          end
        end
      end
    end



  assign Y_lastAddr = Y_addr >= 4'b1010;



  assign Y_done = Y_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (Y_done_enb) begin
          check1_done <= Y_done;
        end
      end
    end

  assign snkDone = check1_done & check2_done;



  assign #1 Y_addr_delay_1 = Y_addr;

  // Data source for Y_expected
  initial
    begin : Y_expected_fileread
      fp_Y_expected = $fopen("Y_expected.dat", "r");
      status_Y_expected = $rewind(fp_Y_expected);
    end

  always @(Y_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Y_expected <= 8'bx;
      end
      else if (ce_out == 1) begin
        status_Y_expected = $fscanf(fp_Y_expected, "%h", Y_expected);
      end
    end

  assign Y_ref = Y_expected;

  always @(posedge clk or posedge reset)
    begin : Y_checker
      if (reset == 1'b1) begin
        Y_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && Y !== Y_ref) begin
          Y_testFailure <= 1'b1;
          $display("ERROR in Y at time %t : Expected '%h' Actual '%h'", $time, Y_ref, Y);
        end
      end
    end

  assign #1 Delayed_addr_delay_1 = Y_addr;

  // Data source for Delayed_expected
  initial
    begin : Delayed_expected_fileread
      fp_Delayed_expected = $fopen("Delayed_expected.dat", "r");
      status_Delayed_expected = $rewind(fp_Delayed_expected);
    end

  always @(Delayed_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Delayed_expected <= 8'bx;
      end
      else if (ce_out == 1) begin
        status_Delayed_expected = $fscanf(fp_Delayed_expected, "%h", Delayed_expected);
      end
    end

  assign Delayed_ref = Delayed_expected;

  always @(posedge clk or posedge reset)
    begin : Delayed_checker
      if (reset == 1'b1) begin
        Delayed_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && Delayed !== Delayed_ref) begin
          Delayed_testFailure <= 1'b1;
          $display("ERROR in Delayed at time %t : Expected '%h' Actual '%h'", $time, Delayed_ref, Delayed);
        end
      end
    end

  assign testFailure = Y_testFailure | Delayed_testFailure;



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // DELAY_AND_ADD_BLOCK_tb


// -------------------------------------------------------------
// 
// File Name: C:\Users\saran\Desktop\TWO_TAP_FILTER_VERILOG\TWO_BIT_ADDER_VERILOG\TWO_BIT_ADDER\TWO_BIT_ADDER\nfp_add_double.v
// Created: 2022-12-12 11:31:30
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: nfp_add_double
// Source Path: TWO_BIT_ADDER/TWO_BIT_ADDER/nfp_add_double
// Hierarchy Level: 1
// 
// {Latency Strategy = "Max"}
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module nfp_add_double
          (clk,
           reset,
           enb,
           nfp_in1,
           nfp_in2,
           nfp_out);


  input   clk;
  input   reset;
  input   enb;
  input   [63:0] nfp_in1;  // ufix64
  input   [63:0] nfp_in2;  // ufix64
  output  [63:0] nfp_out;  // ufix64


  wire aSign;  // ufix1
  wire [10:0] aExponent;  // ufix11
  wire [51:0] aMantissa;  // ufix52
  reg [10:0] Delay1_PS_1_out1;  // ufix11
  wire bSign;  // ufix1
  wire [10:0] bExponent;  // ufix11
  wire [51:0] bMantissa;  // ufix52
  reg [10:0] Delay4_PS_1_out1;  // ufix11
  wire Relational_Operator1_relop1;
  reg [51:0] Delay2_PS_1_out1;  // ufix52
  reg [51:0] Delay5_PS_1_out1;  // ufix52
  wire Relational_Operator_relop1;
  wire bitconcat_aExponent_aMantissa_relop1;
  wire Logical_Operator_out1;  // ufix1
  wire Logical_Operator1_out1;  // ufix1
  reg  Delay_PS_2_out1;  // ufix1
  reg [10:0] Delay2_PS_2_out1;  // ufix11
  reg [10:0] Delay5_PS_2_out1;  // ufix11
  wire [10:0] if_bitconcat_aExponent_aMantiss_out1;  // ufix11
  wire aExponent_cfType_Exponent_I_out1;  // ufix1
  reg  [0:7] Delay18_PS_7_10_reg;  // ufix1 [8]
  wire [0:7] Delay18_PS_7_10_reg_next;  // ufix1 [8]
  wire Delay18_PS_7_10_out1;  // ufix1
  wire Exponent_0_out1;  // ufix1
  wire [10:0] C_out1;  // ufix11
  wire [10:0] if_Exponent_0_out1;  // ufix11
  reg [10:0] Delay1_PS_3_out1;  // ufix11
  reg [10:0] Delay2_PS_7_reg [0:3];  // ufix11 [4]
  wire [10:0] Delay2_PS_7_reg_next [0:3];  // ufix11 [4]
  wire [10:0] Delay2_PS_7_out1;  // ufix11
  reg [10:0] Delay8_PS_8_out1;  // ufix11
  wire exp_norm_cfType_Exponent_In_out1;  // ufix1
  wire alphaExponent_0_cfType_Exp_out1;  // ufix1
  wire alpha1_out1;  // ufix1
  wire alpha0_out1;  // ufix1
  wire if_Exponent_0_cfType_Exp_out1;  // ufix1
  reg [51:0] Delay1_PS_2_out1;  // ufix52
  reg [51:0] Delay4_PS_2_out1;  // ufix52
  wire [51:0] if_bitconcat_aExponent_aMantiss_1_out1;  // ufix52
  wire [52:0] Bit_Concat1_out1;  // ufix53
  wire [1:0] alpha0_1_out1;  // ufix2
  wire [54:0] Bit_Concat_out1;  // ufix55
  wire signed [56:0] Data_Type_Conversion_out1;  // sfix57
  reg signed [56:0] Delay2_PS_3_out1;  // sfix57
  reg signed [56:0] Delay1_PS_5_reg [0:1];  // sfix57 [2]
  wire signed [56:0] Delay1_PS_5_reg_next [0:1];  // sfix57 [2]
  wire signed [56:0] Delay1_PS_5_out1;  // sfix57
  reg  Delay3_PS_1_out1;  // ufix1
  reg  Delay3_PS_2_out1;  // ufix1
  reg  [0:1] Delay6_PS_2_reg;  // ufix1 [2]
  wire [0:1] Delay6_PS_2_reg_next;  // ufix1 [2]
  wire Delay6_PS_2_out1;  // ufix1
  wire if_bitconcat_aExponent_aMantiss_2_out1;  // ufix1
  wire if_bitconcat_aExponent_aMantiss_5_out1;  // ufix1
  wire bitxor_out1;  // ufix1
  reg  Delay10_PS_3_out1;  // ufix1
  wire [10:0] if_bitconcat_aExponent_aMantiss_3_out1;  // ufix11
  wire Exponent_0_out1_1;  // ufix1
  wire exp_b_cfType_Exponent_Inf_o_out1;  // ufix1
  wire alphaExponent_0_cfType_Exp_out1_1;  // ufix1
  wire alpha1_out1_1;  // ufix1
  wire alpha0_out1_1;  // ufix1
  wire if_Exponent_0_cfType_Exp_out1_1;  // ufix1
  wire [51:0] if_bitconcat_aExponent_aMantiss_4_out1;  // ufix52
  wire [52:0] Bit_Concat1_out1_1;  // ufix53
  wire [1:0] alpha0_1_out1_1;  // ufix2
  wire [54:0] Bit_Concat_out1_1;  // ufix55
  wire signed [56:0] Data_Type_Conversion_out1_1;  // sfix57
  reg signed [56:0] Delay2_PS_3_out1_1;  // sfix57
  wire signed [57:0] alphamant_b_ext_in0;  // sfix58
  wire signed [57:0] alphamant_b_ext_1;  // sfix58
  wire signed [56:0] alphamant_b_ext_out1;  // sfix57
  wire signed [56:0] if_opp_Sign_out1;  // sfix57
  reg signed [56:0] Delay6_PS_4_out1;  // sfix57
  wire [10:0] C_out1_1;  // ufix11
  wire [10:0] if_Exponent_0_out1_1;  // ufix11
  reg [10:0] Delay1_PS_3_out1_1;  // ufix11
  wire signed [11:0] storedInteger_exp_a_cor_sto_1;  // sfix12
  wire signed [11:0] storedInteger_exp_a_cor_sto_2;  // sfix12
  wire signed [11:0] storedInteger_exp_a_cor_sto_out1;  // sfix12
  wire [4:0] Bit_Slice2_out1;  // ufix5
  wire Compare_To_Zero_out1;  // ufix1
  wire [5:0] Constant_out1;  // ufix6
  wire [5:0] Bit_Slice_out1;  // ufix6
  wire [5:0] if_opp_Sign_1_out1;  // ufix6
  reg [5:0] Delay7_PS_4_out1;  // ufix6
  wire [7:0] dynamic_shift_1;  // uint8
  wire signed [56:0] bitsra_mant_b_ext_shift_lengt_out1;  // sfix57
  reg signed [56:0] Delay_PS_5_out1;  // sfix57
  wire signed [57:0] mant_a_ext_mant_b_shifted_add_temp;  // sfix58
  wire signed [57:0] mant_a_ext_mant_b_shifted_1;  // sfix58
  wire signed [57:0] mant_a_ext_mant_b_shifted_2;  // sfix58
  wire [55:0] mant_a_ext_mant_b_shifted_out1;  // ufix56
  reg [55:0] Delay_PS_6_out1;  // ufix56
  wire BitSlice_out1;  // ufix1
  reg  [0:1] Delay9_PS_8_reg;  // ufix1 [2]
  wire [0:1] Delay9_PS_8_reg_next;  // ufix1 [2]
  wire Delay9_PS_8_out1;  // ufix1
  wire Logical_Operator_out1_1;  // ufix1
  reg  Delay13_PS_9_out1;  // ufix1
  reg [55:0] Delay7_PS_8_reg [0:1];  // ufix56 [2]
  wire [55:0] Delay7_PS_8_reg_next [0:1];  // ufix56 [2]
  wire [55:0] Delay7_PS_8_out1;  // ufix56
  wire [54:0] BitSlice3_out1;  // ufix55
  wire [6:0] Bit_Slice2_out1_1;  // ufix7
  wire Bit_Slice15_out1;  // ufix1
  wire Bit_Slice14_out1;  // ufix1
  wire Bit_Slice13_out1;  // ufix1
  wire Logical_Operator7_out1;  // ufix1
  wire Logical_Operator6_out1;  // ufix1
  wire Bit_Slice12_out1;  // ufix1
  wire Bit_Slice11_out1;  // ufix1
  wire Logical_Operator4_out1;  // ufix1
  wire Bit_Slice10_out1;  // ufix1
  wire Bit_Slice9_out1;  // ufix1
  wire Logical_Operator14_out1;  // ufix1
  wire Logical_Operator13_out1;  // ufix1
  wire Logical_Operator12_out1;  // ufix1
  wire [7:0] Bit_Slice9_out1_1;  // uint8
  wire Bit_Slice16_out1;  // ufix1
  wire Bit_Slice15_out1_1;  // ufix1
  wire Logical_Operator5_out1;  // ufix1
  wire Bit_Slice14_out1_1;  // ufix1
  wire Bit_Slice13_out1_1;  // ufix1
  wire Logical_Operator7_out1_1;  // ufix1
  wire Logical_Operator6_out1_1;  // ufix1
  wire Bit_Slice12_out1_1;  // ufix1
  wire Bit_Slice11_out1_1;  // ufix1
  wire Logical_Operator4_out1_1;  // ufix1
  wire Bit_Slice10_out1_1;  // ufix1
  wire Bit_Slice9_out1_2;  // ufix1
  wire Logical_Operator14_out1_1;  // ufix1
  wire Logical_Operator13_out1_1;  // ufix1
  wire Logical_Operator12_out1_1;  // ufix1
  wire [7:0] Bit_Slice8_out1;  // uint8
  wire Bit_Slice16_out1_1;  // ufix1
  wire Bit_Slice15_out1_2;  // ufix1
  wire Logical_Operator5_out1_1;  // ufix1
  wire Bit_Slice14_out1_2;  // ufix1
  wire Bit_Slice13_out1_2;  // ufix1
  wire Logical_Operator7_out1_2;  // ufix1
  wire Logical_Operator6_out1_2;  // ufix1
  wire Bit_Slice12_out1_2;  // ufix1
  wire Bit_Slice11_out1_2;  // ufix1
  wire Logical_Operator4_out1_2;  // ufix1
  wire Bit_Slice10_out1_2;  // ufix1
  wire Bit_Slice9_out1_3;  // ufix1
  wire Logical_Operator14_out1_2;  // ufix1
  wire Logical_Operator13_out1_2;  // ufix1
  wire Logical_Operator12_out1_2;  // ufix1
  wire Logical_Operator2_out1;  // ufix1
  wire [7:0] Bit_Slice7_out1;  // uint8
  wire Bit_Slice16_out1_2;  // ufix1
  wire Bit_Slice15_out1_3;  // ufix1
  wire Logical_Operator5_out1_2;  // ufix1
  wire Bit_Slice14_out1_3;  // ufix1
  wire Bit_Slice13_out1_3;  // ufix1
  wire Logical_Operator7_out1_3;  // ufix1
  wire Logical_Operator6_out1_3;  // ufix1
  wire Bit_Slice12_out1_3;  // ufix1
  wire Bit_Slice11_out1_3;  // ufix1
  wire Logical_Operator4_out1_3;  // ufix1
  wire Bit_Slice10_out1_3;  // ufix1
  wire Bit_Slice9_out1_4;  // ufix1
  wire Logical_Operator14_out1_3;  // ufix1
  wire Logical_Operator13_out1_3;  // ufix1
  wire Logical_Operator12_out1_3;  // ufix1
  wire [7:0] Bit_Slice6_out1;  // uint8
  wire Bit_Slice16_out1_3;  // ufix1
  wire Bit_Slice15_out1_4;  // ufix1
  wire Logical_Operator5_out1_3;  // ufix1
  wire Bit_Slice14_out1_4;  // ufix1
  wire Bit_Slice13_out1_4;  // ufix1
  wire Logical_Operator7_out1_4;  // ufix1
  wire Logical_Operator6_out1_4;  // ufix1
  wire Bit_Slice12_out1_4;  // ufix1
  wire Bit_Slice11_out1_4;  // ufix1
  wire Logical_Operator4_out1_4;  // ufix1
  wire Bit_Slice10_out1_4;  // ufix1
  wire Bit_Slice9_out1_5;  // ufix1
  wire Logical_Operator14_out1_4;  // ufix1
  wire Logical_Operator13_out1_4;  // ufix1
  wire Logical_Operator12_out1_4;  // ufix1
  wire [7:0] Bit_Slice1_out1;  // uint8
  wire Bit_Slice16_out1_4;  // ufix1
  wire Bit_Slice15_out1_5;  // ufix1
  wire Logical_Operator5_out1_4;  // ufix1
  wire Bit_Slice14_out1_5;  // ufix1
  wire Bit_Slice13_out1_5;  // ufix1
  wire Logical_Operator7_out1_5;  // ufix1
  wire Logical_Operator6_out1_5;  // ufix1
  wire Bit_Slice12_out1_5;  // ufix1
  wire Bit_Slice11_out1_5;  // ufix1
  wire Logical_Operator4_out1_5;  // ufix1
  wire Bit_Slice10_out1_5;  // ufix1
  wire Bit_Slice9_out1_6;  // ufix1
  wire Logical_Operator14_out1_5;  // ufix1
  wire Logical_Operator13_out1_5;  // ufix1
  wire [7:0] Bit_Slice4_out1;  // uint8
  wire Bit_Slice8_out1_1;  // ufix1
  wire Bit_Slice7_out1_1;  // ufix1
  wire Logical_Operator1_out1_1;  // ufix1
  wire Bit_Slice6_out1_1;  // ufix1
  wire Bit_Slice5_out1;  // ufix1
  wire Logical_Operator3_out1;  // ufix1
  wire Bit_Slice3_out1;  // ufix1
  wire Bit_Slice2_out1_2;  // ufix1
  wire Bit_Slice1_out1_1;  // ufix1
  wire Bit_Slice_out1_1;  // ufix1
  wire [5:0] Constant_out1_1;  // ufix6
  wire [5:0] Constant1_out1;  // ufix6
  wire [5:0] Switch_out1;  // ufix6
  wire Logical_Operator_out1_2;  // ufix1
  wire [5:0] Constant2_out1;  // ufix6
  wire [5:0] Switch1_out1;  // ufix6
  wire [5:0] Constant3_out1;  // ufix6
  wire [5:0] Switch2_out1;  // ufix6
  wire [5:0] Constant4_out1;  // ufix6
  wire Logical_Operator2_out1_1;  // ufix1
  wire [5:0] Switch3_out1;  // ufix6
  wire [5:0] Switch4_out1;  // ufix6
  wire [5:0] Constant5_out1;  // ufix6
  wire [5:0] Switch5_out1;  // ufix6
  wire [5:0] Constant6_out1;  // ufix6
  wire [5:0] Switch6_out1;  // ufix6
  wire [5:0] Constant7_out1;  // ufix6
  wire [5:0] Switch7_out1;  // ufix6
  wire [5:0] Constant8_out1;  // ufix6
  wire [5:0] Switch8_out1;  // ufix6
  wire Logical_Operator12_out1_5;  // ufix1
  wire [5:0] Switch9_out1;  // ufix6
  wire [5:0] Switch10_out1;  // ufix6
  wire [5:0] Constant9_out1;  // ufix6
  wire [5:0] Switch11_out1;  // ufix6
  wire [5:0] Constant10_out1;  // ufix6
  wire [5:0] Switch12_out1;  // ufix6
  wire [5:0] Constant11_out1;  // ufix6
  wire [5:0] Switch14_out1;  // ufix6
  wire [5:0] Constant12_out1;  // ufix6
  wire [5:0] Switch15_out1;  // ufix6
  wire [5:0] Switch16_out1;  // ufix6
  wire [5:0] Constant13_out1;  // ufix6
  wire [5:0] Switch17_out1;  // ufix6
  wire [5:0] Constant14_out1;  // ufix6
  wire [5:0] Switch18_out1;  // ufix6
  wire [5:0] Constant15_out1;  // ufix6
  wire [5:0] Switch19_out1;  // ufix6
  wire [5:0] Constant16_out1;  // ufix6
  wire [5:0] Switch20_out1;  // ufix6
  wire [5:0] Switch21_out1;  // ufix6
  wire Logical_Operator_out1_3;  // ufix1
  wire [5:0] Switch13_out1;  // ufix6
  wire [5:0] Switch_out1_1;  // ufix6
  wire [5:0] Constant9_out1_1;  // ufix6
  wire [5:0] Switch11_out1_1;  // ufix6
  wire [5:0] Constant10_out1_1;  // ufix6
  wire [5:0] Switch12_out1_1;  // ufix6
  wire [5:0] Constant11_out1_1;  // ufix6
  wire [5:0] Switch14_out1_1;  // ufix6
  wire [5:0] Constant12_out1_1;  // ufix6
  wire [5:0] Switch15_out1_1;  // ufix6
  wire [5:0] Switch16_out1_1;  // ufix6
  wire [5:0] Constant13_out1_1;  // ufix6
  wire [5:0] Switch17_out1_1;  // ufix6
  wire [5:0] Constant14_out1_1;  // ufix6
  wire [5:0] Switch18_out1_1;  // ufix6
  wire [5:0] Constant15_out1_1;  // ufix6
  wire [5:0] Switch19_out1_1;  // ufix6
  wire [5:0] Constant16_out1_1;  // ufix6
  wire [5:0] Switch20_out1_1;  // ufix6
  wire [5:0] Switch21_out1_1;  // ufix6
  wire [5:0] Switch13_out1_1;  // ufix6
  wire [5:0] Constant9_out1_2;  // ufix6
  wire [5:0] Switch11_out1_2;  // ufix6
  wire [5:0] Constant10_out1_2;  // ufix6
  wire [5:0] Switch12_out1_2;  // ufix6
  wire [5:0] Constant11_out1_2;  // ufix6
  wire [5:0] Switch14_out1_2;  // ufix6
  wire [5:0] Constant12_out1_2;  // ufix6
  wire [5:0] Switch15_out1_2;  // ufix6
  wire [5:0] Switch16_out1_2;  // ufix6
  wire [5:0] Constant13_out1_2;  // ufix6
  wire [5:0] Switch17_out1_2;  // ufix6
  wire [5:0] Constant14_out1_2;  // ufix6
  wire [5:0] Switch18_out1_2;  // ufix6
  wire [5:0] Constant15_out1_2;  // ufix6
  wire [5:0] Switch19_out1_2;  // ufix6
  wire [5:0] Constant16_out1_2;  // ufix6
  wire [5:0] Switch20_out1_2;  // ufix6
  wire [5:0] Switch21_out1_2;  // ufix6
  wire [5:0] Switch13_out1_2;  // ufix6
  wire Logical_Operator3_out1_1;  // ufix1
  wire [5:0] Switch2_out1_1;  // ufix6
  wire [5:0] Switch1_out1_1;  // ufix6
  wire [5:0] Constant9_out1_3;  // ufix6
  wire [5:0] Switch11_out1_3;  // ufix6
  wire [5:0] Constant10_out1_3;  // ufix6
  wire [5:0] Switch12_out1_3;  // ufix6
  wire [5:0] Constant11_out1_3;  // ufix6
  wire [5:0] Switch14_out1_3;  // ufix6
  wire [5:0] Constant12_out1_3;  // ufix6
  wire [5:0] Switch15_out1_3;  // ufix6
  wire [5:0] Switch16_out1_3;  // ufix6
  wire [5:0] Constant13_out1_3;  // ufix6
  wire [5:0] Switch17_out1_3;  // ufix6
  wire [5:0] Constant14_out1_3;  // ufix6
  wire [5:0] Switch18_out1_3;  // ufix6
  wire [5:0] Constant15_out1_3;  // ufix6
  wire [5:0] Switch19_out1_3;  // ufix6
  wire [5:0] Constant16_out1_3;  // ufix6
  wire [5:0] Switch20_out1_3;  // ufix6
  wire [5:0] Switch21_out1_3;  // ufix6
  wire [5:0] Switch13_out1_3;  // ufix6
  wire [5:0] Constant9_out1_4;  // ufix6
  wire [5:0] Switch11_out1_4;  // ufix6
  wire [5:0] Constant10_out1_4;  // ufix6
  wire [5:0] Switch12_out1_4;  // ufix6
  wire [5:0] Constant11_out1_4;  // ufix6
  wire [5:0] Switch14_out1_4;  // ufix6
  wire [5:0] Constant12_out1_4;  // ufix6
  wire [5:0] Switch15_out1_4;  // ufix6
  wire [5:0] Switch16_out1_4;  // ufix6
  wire [5:0] Constant13_out1_4;  // ufix6
  wire [5:0] Switch17_out1_4;  // ufix6
  wire [5:0] Constant14_out1_4;  // ufix6
  wire [5:0] Switch18_out1_4;  // ufix6
  wire [5:0] Constant15_out1_4;  // ufix6
  wire [5:0] Switch19_out1_4;  // ufix6
  wire [5:0] Constant16_out1_4;  // ufix6
  wire [5:0] Switch20_out1_4;  // ufix6
  wire [5:0] Switch21_out1_4;  // ufix6
  wire [5:0] Switch13_out1_4;  // ufix6
  wire [5:0] Switch3_out1_1;  // ufix6
  wire [5:0] Constant9_out1_5;  // ufix6
  wire [5:0] Switch11_out1_5;  // ufix6
  wire [5:0] Constant10_out1_5;  // ufix6
  wire [5:0] Switch12_out1_5;  // ufix6
  wire [5:0] Constant11_out1_5;  // ufix6
  wire [5:0] Switch14_out1_5;  // ufix6
  wire [5:0] Constant12_out1_5;  // ufix6
  wire [5:0] Switch15_out1_5;  // ufix6
  wire [5:0] Switch16_out1_5;  // ufix6
  wire [5:0] Constant13_out1_5;  // ufix6
  wire [5:0] Switch17_out1_5;  // ufix6
  wire [5:0] Constant14_out1_5;  // ufix6
  wire [5:0] Switch18_out1_5;  // ufix6
  wire [5:0] Constant15_out1_5;  // ufix6
  wire [5:0] Switch19_out1_5;  // ufix6
  wire [5:0] Switch21_out1_5;  // ufix6
  wire [5:0] Switch13_out1_5;  // ufix6
  wire [5:0] Switch5_out1_1;  // ufix6
  wire [5:0] Switch6_out1_1;  // ufix6
  reg [5:0] Delay_PS_7_out1;  // ufix6
  wire [5:0] Bit_Slice_out1_2;  // ufix6
  wire shift_length_exp_a_cor_relop1;
  wire [4:0] Bit_Slice1_out1_2;  // ufix5
  wire Compare_To_Zero_out1_1;  // ufix1
  wire Logical_Operator1_out1_2;  // ufix1
  wire [7:0] C1_out1;  // uint8
  wire [5:0] exp_a_cor_1_sub_cast;  // ufix6
  wire [5:0] exp_a_cor_1_out1;  // ufix6
  wire [5:0] if_shift_length_exp_a_cor_1_out1;  // ufix6
  reg [5:0] Delay6_PS_8_out1;  // ufix6
  wire [7:0] dynamic_shift_3;  // uint8
  wire [55:0] bitsll_Sum_shift_length_out1;  // ufix56
  wire [55:0] bitsrl_Sum_1_out1;  // ufix56
  wire [55:0] if_bitget_Sum_Sum_WordLength_out1;  // ufix56
  reg [55:0] Delay15_PS_9_out1;  // ufix56
  wire [55:0] C5_out1;  // ufix56
  wire [55:0] if_exp_norm_cfType_Exponent_I_out1;  // ufix56
  wire [52:0] BitSlice6_out1;  // ufix53
  wire BitSlice5_out1;  // ufix1
  wire Bit_Slice1_out1_3;  // ufix1
  wire Logical_Operator_out1_4;  // ufix1
  wire Bit_Slice35_out1;  // ufix1
  wire [2:0] Bit_Slice33_out1;  // ufix3
  wire Bit_Reduce13_out1;  // ufix1
  wire [3:0] Bit_Slice32_out1;  // ufix4
  wire Bit_Reduce12_out1;  // ufix1
  wire [3:0] Bit_Slice30_out1;  // ufix4
  wire Bit_Reduce11_out1;  // ufix1
  wire [3:0] Bit_Slice24_out1;  // ufix4
  wire Bit_Reduce10_out1;  // ufix1
  wire [3:0] Bit_Slice28_out1;  // ufix4
  wire Bit_Reduce9_out1;  // ufix1
  wire [3:0] Bit_Slice22_out1;  // ufix4
  wire Bit_Reduce8_out1;  // ufix1
  wire [3:0] Bit_Slice20_out1;  // ufix4
  wire Bit_Reduce7_out1;  // ufix1
  wire [3:0] Bit_Slice16_out1_5;  // ufix4
  wire Bit_Reduce6_out1;  // ufix1
  wire [3:0] Bit_Slice14_out1_6;  // ufix4
  wire Bit_Reduce5_out1;  // ufix1
  wire [3:0] Bit_Slice18_out1;  // ufix4
  wire Bit_Reduce4_out1;  // ufix1
  wire [3:0] Bit_Slice12_out1_6;  // ufix4
  wire Bit_Reduce3_out1;  // ufix1
  wire [3:0] Bit_Slice10_out1_6;  // ufix4
  wire Bit_Reduce2_out1;  // ufix1
  wire [3:0] Bit_Slice8_out1_2;  // ufix4
  wire Bit_Reduce1_out1;  // ufix1
  wire [3:0] Bit_Slice6_out1_2;  // ufix4
  wire Bit_Reduce_out1;  // ufix1
  wire Logical_Operator1_out1_3;  // ufix1
  wire Logical_Operator2_out1_2;  // ufix1
  wire Logical_Operator3_out1_2;  // ufix1
  wire Logical_Operator4_out1_6;  // ufix1
  wire Logical_Operator5_out1_5;  // ufix1
  wire Logical_Operator6_out1_6;  // ufix1
  wire Logical_Operator7_out1_6;  // ufix1
  wire Logical_Operator8_out1;  // ufix1
  wire Logical_Operator9_out1;  // ufix1
  wire Logical_Operator10_out1;  // ufix1
  wire Logical_Operator12_out1_6;  // ufix1
  wire Logical_Operator13_out1_6;  // ufix1
  wire Logical_Operator14_out1_6;  // ufix1
  wire Logical_Operator11_out1;  // ufix1
  wire Logical_Operator_out1_5;  // ufix1
  wire Bit_Slice1_out1_4;  // ufix1
  wire Logical_Operator2_out1_3;  // ufix1
  wire Bit_Slice5_out1_1;  // ufix1
  wire Logical_Operator2_out1_4;  // ufix1
  wire Bit_Slice2_out1_3;  // ufix1
  wire Logical_Operator_out1_6;  // ufix1
  wire Logical_Operator1_out1_4;  // ufix1
  wire Switch_out1_2;  // ufix1
  wire Logical_Operator1_out1_5;  // ufix1
  wire Bit_Slice3_out1_1;  // ufix1
  wire Bit_Slice2_out1_4;  // ufix1
  wire Logical_Operator2_out1_5;  // ufix1
  wire Bit_Slice1_out1_5;  // ufix1
  wire Logical_Operator1_out1_6;  // ufix1
  wire Logical_Operator4_out1_7;  // ufix1
  wire Bit_Slice_out1_3;  // ufix1
  wire Logical_Operator7_out1_7;  // ufix1
  wire Logical_Operator3_out1_3;  // ufix1
  wire Logical_Operator6_out1_7;  // ufix1
  wire Logical_Operator5_out1_6;  // ufix1
  wire [2:0] Bit_Slice31_out1;  // ufix3
  wire Bit_Slice2_out1_5;  // ufix1
  wire Logical_Operator2_out1_6;  // ufix1
  wire Bit_Slice1_out1_6;  // ufix1
  wire Logical_Operator1_out1_7;  // ufix1
  wire Logical_Operator4_out1_8;  // ufix1
  wire Bit_Slice_out1_4;  // ufix1
  wire Logical_Operator7_out1_8;  // ufix1
  wire Logical_Operator3_out1_4;  // ufix1
  wire Logical_Operator4_out1_9;  // ufix1
  wire Logical_Operator3_out1_5;  // ufix1
  wire Logical_Operator6_out1_8;  // ufix1
  wire Logical_Operator5_out1_7;  // ufix1
  wire Logical_Operator6_out1_9;  // ufix1
  wire Logical_Operator5_out1_8;  // ufix1
  wire Bit_Slice4_out1_1;  // ufix1
  wire [2:0] Bit_Slice25_out1;  // ufix3
  wire Bit_Slice2_out1_6;  // ufix1
  wire Logical_Operator2_out1_7;  // ufix1
  wire Bit_Slice1_out1_7;  // ufix1
  wire Logical_Operator1_out1_8;  // ufix1
  wire Logical_Operator4_out1_10;  // ufix1
  wire Bit_Slice_out1_5;  // ufix1
  wire Logical_Operator7_out1_9;  // ufix1
  wire Logical_Operator3_out1_6;  // ufix1
  wire Logical_Operator6_out1_10;  // ufix1
  wire Logical_Operator5_out1_9;  // ufix1
  wire [2:0] Bit_Slice29_out1;  // ufix3
  wire Bit_Slice2_out1_7;  // ufix1
  wire Logical_Operator2_out1_8;  // ufix1
  wire Bit_Slice1_out1_8;  // ufix1
  wire Logical_Operator1_out1_9;  // ufix1
  wire Logical_Operator4_out1_11;  // ufix1
  wire Bit_Slice_out1_6;  // ufix1
  wire Logical_Operator7_out1_10;  // ufix1
  wire Logical_Operator3_out1_7;  // ufix1
  wire Logical_Operator2_out1_9;  // ufix1
  wire Logical_Operator6_out1_11;  // ufix1
  wire Logical_Operator5_out1_10;  // ufix1
  wire Logical_Operator1_out1_10;  // ufix1
  wire [2:0] Bit_Slice23_out1;  // ufix3
  wire Bit_Slice2_out1_8;  // ufix1
  wire Logical_Operator2_out1_10;  // ufix1
  wire Bit_Slice1_out1_9;  // ufix1
  wire Logical_Operator1_out1_11;  // ufix1
  wire Logical_Operator4_out1_12;  // ufix1
  wire Bit_Slice_out1_7;  // ufix1
  wire Logical_Operator7_out1_11;  // ufix1
  wire Logical_Operator3_out1_8;  // ufix1
  wire Logical_Operator6_out1_12;  // ufix1
  wire Logical_Operator5_out1_11;  // ufix1
  wire [2:0] Bit_Slice21_out1;  // ufix3
  wire Bit_Slice2_out1_9;  // ufix1
  wire Logical_Operator2_out1_11;  // ufix1
  wire Bit_Slice1_out1_10;  // ufix1
  wire Logical_Operator1_out1_12;  // ufix1
  wire Logical_Operator4_out1_13;  // ufix1
  wire Bit_Slice_out1_8;  // ufix1
  wire Logical_Operator7_out1_12;  // ufix1
  wire Logical_Operator3_out1_9;  // ufix1
  wire Logical_Operator2_out1_12;  // ufix1
  wire Logical_Operator4_out1_14;  // ufix1
  wire Logical_Operator3_out1_10;  // ufix1
  wire Logical_Operator6_out1_13;  // ufix1
  wire Logical_Operator5_out1_12;  // ufix1
  wire Logical_Operator6_out1_14;  // ufix1
  wire Logical_Operator5_out1_13;  // ufix1
  wire Logical_Operator1_out1_13;  // ufix1
  wire [2:0] Bit_Slice17_out1;  // ufix3
  wire Bit_Slice2_out1_10;  // ufix1
  wire Logical_Operator2_out1_13;  // ufix1
  wire Bit_Slice1_out1_11;  // ufix1
  wire Logical_Operator1_out1_14;  // ufix1
  wire Logical_Operator4_out1_15;  // ufix1
  wire Bit_Slice_out1_9;  // ufix1
  wire Logical_Operator7_out1_13;  // ufix1
  wire Logical_Operator3_out1_11;  // ufix1
  wire Logical_Operator6_out1_15;  // ufix1
  wire Logical_Operator5_out1_14;  // ufix1
  wire [2:0] Bit_Slice15_out1_6;  // ufix3
  wire Bit_Slice2_out1_11;  // ufix1
  wire Logical_Operator2_out1_14;  // ufix1
  wire Bit_Slice1_out1_12;  // ufix1
  wire Logical_Operator1_out1_15;  // ufix1
  wire Logical_Operator4_out1_16;  // ufix1
  wire Bit_Slice_out1_10;  // ufix1
  wire Logical_Operator7_out1_14;  // ufix1
  wire Logical_Operator3_out1_12;  // ufix1
  wire Logical_Operator2_out1_15;  // ufix1
  wire Logical_Operator6_out1_16;  // ufix1
  wire Logical_Operator5_out1_15;  // ufix1
  wire Logical_Operator1_out1_16;  // ufix1
  wire [2:0] Bit_Slice19_out1;  // ufix3
  wire Bit_Slice2_out1_12;  // ufix1
  wire Logical_Operator2_out1_16;  // ufix1
  wire Bit_Slice1_out1_13;  // ufix1
  wire Logical_Operator1_out1_17;  // ufix1
  wire Logical_Operator4_out1_17;  // ufix1
  wire Bit_Slice_out1_11;  // ufix1
  wire Logical_Operator7_out1_15;  // ufix1
  wire Logical_Operator3_out1_13;  // ufix1
  wire Logical_Operator6_out1_17;  // ufix1
  wire Logical_Operator5_out1_16;  // ufix1
  wire [2:0] Bit_Slice13_out1_6;  // ufix3
  wire Bit_Slice2_out1_13;  // ufix1
  wire Logical_Operator2_out1_17;  // ufix1
  wire Bit_Slice1_out1_14;  // ufix1
  wire Logical_Operator1_out1_18;  // ufix1
  wire Logical_Operator4_out1_18;  // ufix1
  wire Bit_Slice_out1_12;  // ufix1
  wire Logical_Operator7_out1_16;  // ufix1
  wire Logical_Operator3_out1_14;  // ufix1
  wire Logical_Operator4_out1_19;  // ufix1
  wire Logical_Operator3_out1_15;  // ufix1
  wire Logical_Operator6_out1_18;  // ufix1
  wire Logical_Operator5_out1_17;  // ufix1
  wire Logical_Operator6_out1_19;  // ufix1
  wire Logical_Operator5_out1_18;  // ufix1
  wire [2:0] Bit_Slice11_out1_6;  // ufix3
  wire Bit_Slice2_out1_14;  // ufix1
  wire Logical_Operator2_out1_18;  // ufix1
  wire Bit_Slice1_out1_15;  // ufix1
  wire Logical_Operator1_out1_19;  // ufix1
  wire Logical_Operator4_out1_20;  // ufix1
  wire Bit_Slice_out1_13;  // ufix1
  wire Logical_Operator7_out1_17;  // ufix1
  wire Logical_Operator3_out1_16;  // ufix1
  wire Logical_Operator6_out1_20;  // ufix1
  wire Logical_Operator5_out1_19;  // ufix1
  wire [2:0] Bit_Slice9_out1_7;  // ufix3
  wire Bit_Slice2_out1_15;  // ufix1
  wire Logical_Operator2_out1_19;  // ufix1
  wire Bit_Slice1_out1_16;  // ufix1
  wire Logical_Operator1_out1_20;  // ufix1
  wire Logical_Operator4_out1_21;  // ufix1
  wire Bit_Slice_out1_14;  // ufix1
  wire Logical_Operator7_out1_18;  // ufix1
  wire Logical_Operator3_out1_17;  // ufix1
  wire Logical_Operator2_out1_20;  // ufix1
  wire Logical_Operator6_out1_21;  // ufix1
  wire Logical_Operator5_out1_20;  // ufix1
  wire Logical_Operator1_out1_21;  // ufix1
  wire [2:0] Bit_Slice7_out1_2;  // ufix3
  wire Bit_Slice2_out1_16;  // ufix1
  wire Logical_Operator2_out1_21;  // ufix1
  wire Bit_Slice1_out1_17;  // ufix1
  wire Logical_Operator1_out1_22;  // ufix1
  wire Logical_Operator4_out1_22;  // ufix1
  wire Bit_Slice_out1_15;  // ufix1
  wire Logical_Operator7_out1_19;  // ufix1
  wire Logical_Operator3_out1_18;  // ufix1
  wire Logical_Operator6_out1_22;  // ufix1
  wire Logical_Operator5_out1_21;  // ufix1
  wire [2:0] Bit_Slice_out1_16;  // ufix3
  wire Bit_Slice2_out1_17;  // ufix1
  wire Logical_Operator2_out1_22;  // ufix1
  wire Bit_Slice1_out1_18;  // ufix1
  wire Logical_Operator1_out1_23;  // ufix1
  wire Bit_Slice_out1_17;  // ufix1
  wire Logical_Operator7_out1_20;  // ufix1
  wire Logical_Operator3_out1_19;  // ufix1
  wire Bit_Slice27_out1;  // ufix1
  wire Logical_Operator4_out1_23;  // ufix1
  wire Logical_Operator3_out1_20;  // ufix1
  wire Logical_Operator4_out1_24;  // ufix1
  wire Logical_Operator3_out1_21;  // ufix1
  wire Logical_Operator4_out1_25;  // ufix1
  wire Constant_out1_2;  // ufix1
  wire Logical_Operator6_out1_23;  // ufix1
  wire Logical_Operator5_out1_22;  // ufix1
  wire Logical_Operator6_out1_24;  // ufix1
  wire Logical_Operator5_out1_23;  // ufix1
  wire Logical_Operator6_out1_25;  // ufix1
  wire Logical_Operator5_out1_24;  // ufix1
  reg  Delay1_PS_5_out1_1;  // ufix1
  reg  Delay6_PS_6_out1;  // ufix1
  reg  [0:1] Delay11_PS_8_reg;  // ufix1 [2]
  wire [0:1] Delay11_PS_8_reg_next;  // ufix1 [2]
  wire Delay11_PS_8_out1;  // ufix1
  wire BitSlice1_out1;  // ufix1
  wire sticky_bitget_Sum_1_out1;  // ufix1
  reg  [0:1] Delay10_PS_8_reg;  // ufix1 [2]
  wire [0:1] Delay10_PS_8_reg_next;  // ufix1 [2]
  wire Delay10_PS_8_out1;  // ufix1
  wire if_bitget_Sum_Sum_WordLength_2_out1;  // ufix1
  wire BitSlice_out1_1;  // ufix1
  wire BitSlice1_out1_1;  // ufix1
  reg  Delay19_PS_9_out1;  // ufix1
  wire sticky_bitget_Sum_1_out1_1;  // ufix1
  wire alphabitget_Mant_tmp_2_0_out1;  // ufix1
  wire alphabitget_Mant_tmp_1_0_out1;  // ufix1
  wire alpha0_out1_2;  // ufix1
  wire [51:0] BitSlice4_out1;  // ufix52
  wire [52:0] Bit_Concat_out1_2;  // ufix53
  wire [52:0] cast_2_like_Mant_tmp_out1;  // ufix53
  wire [52:0] Mant_tmp_cast_2_like_Man_out1;  // ufix53
  wire [52:0] if_bitget_Mant_tmp_1_0_out1;  // ufix53
  reg [52:0] Delay_PS_10_out1;  // ufix53
  wire BitSlice2_out1;  // ufix1
  wire BitSlice4_out1_1;  // ufix1
  wire [10:0] C4_out1;  // ufix11
  wire Sum_0_out1;  // ufix1
  wire [10:0] exp_a_cor_shift_length_1;  // ufix11
  wire [10:0] exp_a_cor_shift_length_out1;  // ufix11
  wire [10:0] C2_out1;  // ufix11
  wire [10:0] if_shift_length_exp_a_cor_out1;  // ufix11
  reg [10:0] Delay5_PS_8_out1;  // ufix11
  wire BitSlice2_out1_1;  // ufix1
  wire [10:0] C3_out1;  // ufix11
  wire [10:0] if_Sum_0_out1;  // ufix11
  wire [10:0] if_bitget_Sum_Sum_WordLength_1_out1;  // ufix11
  wire [10:0] C_out1_2;  // ufix11
  wire [10:0] exp_a_cor_1_out1_1;  // ufix11
  wire [10:0] if_bitget_Sum_Sum_WordLength_1_out1_1;  // ufix11
  reg [10:0] Delay14_PS_9_out1;  // ufix11
  wire [10:0] if_bitget_Sum_Sum_WordLength_out1_1;  // ufix11
  reg [10:0] Delay1_PS_10_out1;  // ufix11
  wire [10:0] cast_1_like_Exp_out1;  // ufix11
  wire [10:0] Exp_cast_1_like_Exp_out1;  // ufix11
  wire [10:0] if_bitget_Mant_tmp_Mant_tmp_Wor_out1;  // ufix11
  wire Exponent_0_out1_2;  // ufix1
  wire [51:0] BitSlice3_out1_1;  // ufix52
  wire Mantissa_0_out1;  // ufix1
  wire alphaExponent_0_Mantissa_out1;  // ufix1
  wire Constant_out1_3;  // ufix1
  wire Switch_out1_3;  // ufix1
  reg  [0:7] Delay14_PS_7_10_reg;  // ufix1 [8]
  wire [0:7] Delay14_PS_7_10_reg_next;  // ufix1 [8]
  wire Delay14_PS_7_10_out1;  // ufix1
  wire alphaaSign_1_bSign_1_out1;  // ufix1
  reg  [0:7] Delay13_PS_7_10_reg;  // ufix1 [8]
  wire [0:7] Delay13_PS_7_10_reg_next;  // ufix1 [8]
  wire Delay13_PS_7_10_out1;  // ufix1
  wire if_Exponent_0_Mantissa_out1;  // ufix1
  reg  Delay6_PS_11_out1;  // ufix1
  reg [10:0] Delay15_PS_7_10_reg [0:7];  // ufix11 [8]
  wire [10:0] Delay15_PS_7_10_reg_next [0:7];  // ufix11 [8]
  wire [10:0] Delay15_PS_7_10_out1;  // ufix11
  wire [10:0] if_aExponent_cfType_Exponent_out1;  // ufix11
  reg [10:0] Delay7_PS_11_out1;  // ufix11
  wire mant_a_0_out1;  // ufix1
  wire opp_signs_exp_b_cfType_out1;  // ufix1
  wire alphamant_a_0_opp_signs_out1;  // ufix1
  wire [51:0] BitSet_out1;  // ufix52
  wire [51:0] if_mant_a_0_opp_signs_out1;  // ufix52
  reg [51:0] Delay2_PS_3_out1_2;  // ufix52
  reg [51:0] Delay17_PS_7_10_reg [0:6];  // ufix52 [7]
  wire [51:0] Delay17_PS_7_10_reg_next [0:6];  // ufix52 [7]
  wire [51:0] Delay17_PS_7_10_out1;  // ufix52
  wire [51:0] if_aExponent_cfType_Exponent_1_out1;  // ufix52
  reg [51:0] Delay8_PS_11_out1;  // ufix52
  wire [63:0] nfp_out_pack;  // ufix64


  // Split 64 bit word into FP sign, exponent, mantissa
  assign aSign = nfp_in1[63];
  assign aExponent = nfp_in1[62:52];
  assign aMantissa = nfp_in1[51:0];



  always @(posedge clk or posedge reset)
    begin : Delay1_PS_1_process
      if (reset == 1'b1) begin
        Delay1_PS_1_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS_1_out1 <= aExponent;
        end
      end
    end



  // Split 64 bit word into FP sign, exponent, mantissa
  assign bSign = nfp_in2[63];
  assign bExponent = nfp_in2[62:52];
  assign bMantissa = nfp_in2[51:0];



  always @(posedge clk or posedge reset)
    begin : Delay4_PS_1_process
      if (reset == 1'b1) begin
        Delay4_PS_1_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay4_PS_1_out1 <= bExponent;
        end
      end
    end



  assign Relational_Operator1_relop1 = Delay1_PS_1_out1 == Delay4_PS_1_out1;



  always @(posedge clk or posedge reset)
    begin : Delay2_PS_1_process
      if (reset == 1'b1) begin
        Delay2_PS_1_out1 <= 52'h0000000000000;
      end
      else begin
        if (enb) begin
          Delay2_PS_1_out1 <= aMantissa;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_PS_1_process
      if (reset == 1'b1) begin
        Delay5_PS_1_out1 <= 52'h0000000000000;
      end
      else begin
        if (enb) begin
          Delay5_PS_1_out1 <= bMantissa;
        end
      end
    end



  assign Relational_Operator_relop1 = Delay1_PS_1_out1 > Delay4_PS_1_out1;



  assign bitconcat_aExponent_aMantissa_relop1 = Delay2_PS_1_out1 >= Delay5_PS_1_out1;



  assign Logical_Operator_out1 = Relational_Operator1_relop1 & bitconcat_aExponent_aMantissa_relop1;



  assign Logical_Operator1_out1 = Relational_Operator_relop1 | Logical_Operator_out1;



  always @(posedge clk or posedge reset)
    begin : Delay_PS_2_process
      if (reset == 1'b1) begin
        Delay_PS_2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_PS_2_out1 <= Logical_Operator1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_PS_2_process
      if (reset == 1'b1) begin
        Delay2_PS_2_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay2_PS_2_out1 <= Delay4_PS_1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_PS_2_process
      if (reset == 1'b1) begin
        Delay5_PS_2_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay5_PS_2_out1 <= Delay1_PS_1_out1;
        end
      end
    end



  assign if_bitconcat_aExponent_aMantiss_out1 = (Delay_PS_2_out1 == 1'b0 ? Delay2_PS_2_out1 :
              Delay5_PS_2_out1);



  assign aExponent_cfType_Exponent_I_out1 = if_bitconcat_aExponent_aMantiss_out1 == 11'b11111111111;



  always @(posedge clk or posedge reset)
    begin : Delay18_PS_7_10_process
      if (reset == 1'b1) begin
        Delay18_PS_7_10_reg[0] <= 1'b0;
        Delay18_PS_7_10_reg[1] <= 1'b0;
        Delay18_PS_7_10_reg[2] <= 1'b0;
        Delay18_PS_7_10_reg[3] <= 1'b0;
        Delay18_PS_7_10_reg[4] <= 1'b0;
        Delay18_PS_7_10_reg[5] <= 1'b0;
        Delay18_PS_7_10_reg[6] <= 1'b0;
        Delay18_PS_7_10_reg[7] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay18_PS_7_10_reg[0] <= Delay18_PS_7_10_reg_next[0];
          Delay18_PS_7_10_reg[1] <= Delay18_PS_7_10_reg_next[1];
          Delay18_PS_7_10_reg[2] <= Delay18_PS_7_10_reg_next[2];
          Delay18_PS_7_10_reg[3] <= Delay18_PS_7_10_reg_next[3];
          Delay18_PS_7_10_reg[4] <= Delay18_PS_7_10_reg_next[4];
          Delay18_PS_7_10_reg[5] <= Delay18_PS_7_10_reg_next[5];
          Delay18_PS_7_10_reg[6] <= Delay18_PS_7_10_reg_next[6];
          Delay18_PS_7_10_reg[7] <= Delay18_PS_7_10_reg_next[7];
        end
      end
    end

  assign Delay18_PS_7_10_out1 = Delay18_PS_7_10_reg[7];
  assign Delay18_PS_7_10_reg_next[0] = aExponent_cfType_Exponent_I_out1;
  assign Delay18_PS_7_10_reg_next[1] = Delay18_PS_7_10_reg[0];
  assign Delay18_PS_7_10_reg_next[2] = Delay18_PS_7_10_reg[1];
  assign Delay18_PS_7_10_reg_next[3] = Delay18_PS_7_10_reg[2];
  assign Delay18_PS_7_10_reg_next[4] = Delay18_PS_7_10_reg[3];
  assign Delay18_PS_7_10_reg_next[5] = Delay18_PS_7_10_reg[4];
  assign Delay18_PS_7_10_reg_next[6] = Delay18_PS_7_10_reg[5];
  assign Delay18_PS_7_10_reg_next[7] = Delay18_PS_7_10_reg[6];



  assign Exponent_0_out1 = if_bitconcat_aExponent_aMantiss_out1 == 11'b00000000000;



  assign C_out1 = 11'b00000000001;



  assign if_Exponent_0_out1 = (Exponent_0_out1 == 1'b0 ? if_bitconcat_aExponent_aMantiss_out1 :
              C_out1);



  always @(posedge clk or posedge reset)
    begin : Delay1_PS_3_process
      if (reset == 1'b1) begin
        Delay1_PS_3_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS_3_out1 <= if_Exponent_0_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_PS_7_process
      if (reset == 1'b1) begin
        Delay2_PS_7_reg[0] <= 11'b00000000000;
        Delay2_PS_7_reg[1] <= 11'b00000000000;
        Delay2_PS_7_reg[2] <= 11'b00000000000;
        Delay2_PS_7_reg[3] <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay2_PS_7_reg[0] <= Delay2_PS_7_reg_next[0];
          Delay2_PS_7_reg[1] <= Delay2_PS_7_reg_next[1];
          Delay2_PS_7_reg[2] <= Delay2_PS_7_reg_next[2];
          Delay2_PS_7_reg[3] <= Delay2_PS_7_reg_next[3];
        end
      end
    end

  assign Delay2_PS_7_out1 = Delay2_PS_7_reg[3];
  assign Delay2_PS_7_reg_next[0] = Delay1_PS_3_out1;
  assign Delay2_PS_7_reg_next[1] = Delay2_PS_7_reg[0];
  assign Delay2_PS_7_reg_next[2] = Delay2_PS_7_reg[1];
  assign Delay2_PS_7_reg_next[3] = Delay2_PS_7_reg[2];



  always @(posedge clk or posedge reset)
    begin : Delay8_PS_8_process
      if (reset == 1'b1) begin
        Delay8_PS_8_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay8_PS_8_out1 <= Delay2_PS_7_out1;
        end
      end
    end



  assign exp_norm_cfType_Exponent_In_out1 = Delay8_PS_8_out1 == 11'b11111111110;



  assign alphaExponent_0_cfType_Exp_out1 = Exponent_0_out1 | aExponent_cfType_Exponent_I_out1;



  assign alpha1_out1 = 1'b1;



  assign alpha0_out1 = 1'b0;



  assign if_Exponent_0_cfType_Exp_out1 = (alphaExponent_0_cfType_Exp_out1 == 1'b0 ? alpha1_out1 :
              alpha0_out1);



  always @(posedge clk or posedge reset)
    begin : Delay1_PS_2_process
      if (reset == 1'b1) begin
        Delay1_PS_2_out1 <= 52'h0000000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS_2_out1 <= Delay5_PS_1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay4_PS_2_process
      if (reset == 1'b1) begin
        Delay4_PS_2_out1 <= 52'h0000000000000;
      end
      else begin
        if (enb) begin
          Delay4_PS_2_out1 <= Delay2_PS_1_out1;
        end
      end
    end



  assign if_bitconcat_aExponent_aMantiss_1_out1 = (Delay_PS_2_out1 == 1'b0 ? Delay1_PS_2_out1 :
              Delay4_PS_2_out1);



  assign Bit_Concat1_out1 = {if_Exponent_0_cfType_Exp_out1, if_bitconcat_aExponent_aMantiss_1_out1};



  assign alpha0_1_out1 = 2'b00;



  assign Bit_Concat_out1 = {Bit_Concat1_out1, alpha0_1_out1};



  assign Data_Type_Conversion_out1 = {2'b0, Bit_Concat_out1};



  always @(posedge clk or posedge reset)
    begin : Delay2_PS_3_process
      if (reset == 1'b1) begin
        Delay2_PS_3_out1 <= 57'sh000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_PS_3_out1 <= Data_Type_Conversion_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_PS_5_process
      if (reset == 1'b1) begin
        Delay1_PS_5_reg[0] <= 57'sh000000000000000;
        Delay1_PS_5_reg[1] <= 57'sh000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS_5_reg[0] <= Delay1_PS_5_reg_next[0];
          Delay1_PS_5_reg[1] <= Delay1_PS_5_reg_next[1];
        end
      end
    end

  assign Delay1_PS_5_out1 = Delay1_PS_5_reg[1];
  assign Delay1_PS_5_reg_next[0] = Delay2_PS_3_out1;
  assign Delay1_PS_5_reg_next[1] = Delay1_PS_5_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay3_PS_1_process
      if (reset == 1'b1) begin
        Delay3_PS_1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_PS_1_out1 <= bSign;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay3_PS_2_process
      if (reset == 1'b1) begin
        Delay3_PS_2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_PS_2_out1 <= Delay3_PS_1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay6_PS_2_process
      if (reset == 1'b1) begin
        Delay6_PS_2_reg[0] <= 1'b0;
        Delay6_PS_2_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_PS_2_reg[0] <= Delay6_PS_2_reg_next[0];
          Delay6_PS_2_reg[1] <= Delay6_PS_2_reg_next[1];
        end
      end
    end

  assign Delay6_PS_2_out1 = Delay6_PS_2_reg[1];
  assign Delay6_PS_2_reg_next[0] = aSign;
  assign Delay6_PS_2_reg_next[1] = Delay6_PS_2_reg[0];



  assign if_bitconcat_aExponent_aMantiss_2_out1 = (Delay_PS_2_out1 == 1'b0 ? Delay3_PS_2_out1 :
              Delay6_PS_2_out1);



  assign if_bitconcat_aExponent_aMantiss_5_out1 = (Delay_PS_2_out1 == 1'b0 ? Delay6_PS_2_out1 :
              Delay3_PS_2_out1);



  assign bitxor_out1 = if_bitconcat_aExponent_aMantiss_2_out1 ^ if_bitconcat_aExponent_aMantiss_5_out1;



  always @(posedge clk or posedge reset)
    begin : Delay10_PS_3_process
      if (reset == 1'b1) begin
        Delay10_PS_3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_PS_3_out1 <= bitxor_out1;
        end
      end
    end



  assign if_bitconcat_aExponent_aMantiss_3_out1 = (Delay_PS_2_out1 == 1'b0 ? Delay5_PS_2_out1 :
              Delay2_PS_2_out1);



  assign Exponent_0_out1_1 = if_bitconcat_aExponent_aMantiss_3_out1 == 11'b00000000000;



  assign exp_b_cfType_Exponent_Inf_o_out1 = if_bitconcat_aExponent_aMantiss_3_out1 == 11'b11111111111;



  assign alphaExponent_0_cfType_Exp_out1_1 = Exponent_0_out1_1 | exp_b_cfType_Exponent_Inf_o_out1;



  assign alpha1_out1_1 = 1'b1;



  assign alpha0_out1_1 = 1'b0;



  assign if_Exponent_0_cfType_Exp_out1_1 = (alphaExponent_0_cfType_Exp_out1_1 == 1'b0 ? alpha1_out1_1 :
              alpha0_out1_1);



  assign if_bitconcat_aExponent_aMantiss_4_out1 = (Delay_PS_2_out1 == 1'b0 ? Delay4_PS_2_out1 :
              Delay1_PS_2_out1);



  assign Bit_Concat1_out1_1 = {if_Exponent_0_cfType_Exp_out1_1, if_bitconcat_aExponent_aMantiss_4_out1};



  assign alpha0_1_out1_1 = 2'b00;



  assign Bit_Concat_out1_1 = {Bit_Concat1_out1_1, alpha0_1_out1_1};



  assign Data_Type_Conversion_out1_1 = {2'b0, Bit_Concat_out1_1};



  always @(posedge clk or posedge reset)
    begin : Delay2_PS_3_1_process
      if (reset == 1'b1) begin
        Delay2_PS_3_out1_1 <= 57'sh000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_PS_3_out1_1 <= Data_Type_Conversion_out1_1;
        end
      end
    end



  assign alphamant_b_ext_1 = {Delay2_PS_3_out1_1[56], Delay2_PS_3_out1_1};
  assign alphamant_b_ext_in0 =  - (alphamant_b_ext_1);
  assign alphamant_b_ext_out1 = alphamant_b_ext_in0[56:0];



  assign if_opp_Sign_out1 = (Delay10_PS_3_out1 == 1'b0 ? Delay2_PS_3_out1_1 :
              alphamant_b_ext_out1);



  always @(posedge clk or posedge reset)
    begin : Delay6_PS_4_process
      if (reset == 1'b1) begin
        Delay6_PS_4_out1 <= 57'sh000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_PS_4_out1 <= if_opp_Sign_out1;
        end
      end
    end



  assign C_out1_1 = 11'b00000000001;



  assign if_Exponent_0_out1_1 = (Exponent_0_out1_1 == 1'b0 ? if_bitconcat_aExponent_aMantiss_3_out1 :
              C_out1_1);



  always @(posedge clk or posedge reset)
    begin : Delay1_PS_3_1_process
      if (reset == 1'b1) begin
        Delay1_PS_3_out1_1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS_3_out1_1 <= if_Exponent_0_out1_1;
        end
      end
    end



  assign storedInteger_exp_a_cor_sto_1 = {1'b0, Delay1_PS_3_out1};
  assign storedInteger_exp_a_cor_sto_2 = {1'b0, Delay1_PS_3_out1_1};
  assign storedInteger_exp_a_cor_sto_out1 = storedInteger_exp_a_cor_sto_1 - storedInteger_exp_a_cor_sto_2;



  assign Bit_Slice2_out1 = storedInteger_exp_a_cor_sto_out1[10:6];



  assign Compare_To_Zero_out1 = Bit_Slice2_out1 == 5'b00000;



  assign Constant_out1 = 6'b111111;



  assign Bit_Slice_out1 = storedInteger_exp_a_cor_sto_out1[5:0];



  assign if_opp_Sign_1_out1 = (Compare_To_Zero_out1 == 1'b0 ? Constant_out1 :
              Bit_Slice_out1);



  always @(posedge clk or posedge reset)
    begin : Delay7_PS_4_process
      if (reset == 1'b1) begin
        Delay7_PS_4_out1 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay7_PS_4_out1 <= if_opp_Sign_1_out1;
        end
      end
    end



  assign dynamic_shift_1 = {2'b0, Delay7_PS_4_out1};
  assign bitsra_mant_b_ext_shift_lengt_out1 = Delay6_PS_4_out1 >>> dynamic_shift_1;



  always @(posedge clk or posedge reset)
    begin : Delay_PS_5_process
      if (reset == 1'b1) begin
        Delay_PS_5_out1 <= 57'sh000000000000000;
      end
      else begin
        if (enb) begin
          Delay_PS_5_out1 <= bitsra_mant_b_ext_shift_lengt_out1;
        end
      end
    end



  assign mant_a_ext_mant_b_shifted_1 = {Delay1_PS_5_out1[56], Delay1_PS_5_out1};
  assign mant_a_ext_mant_b_shifted_2 = {Delay_PS_5_out1[56], Delay_PS_5_out1};
  assign mant_a_ext_mant_b_shifted_add_temp = mant_a_ext_mant_b_shifted_1 + mant_a_ext_mant_b_shifted_2;
  assign mant_a_ext_mant_b_shifted_out1 = mant_a_ext_mant_b_shifted_add_temp[55:0];



  always @(posedge clk or posedge reset)
    begin : Delay_PS_6_process
      if (reset == 1'b1) begin
        Delay_PS_6_out1 <= 56'h00000000000000;
      end
      else begin
        if (enb) begin
          Delay_PS_6_out1 <= mant_a_ext_mant_b_shifted_out1;
        end
      end
    end



  assign BitSlice_out1 = Delay_PS_6_out1[55];



  always @(posedge clk or posedge reset)
    begin : Delay9_PS_8_process
      if (reset == 1'b1) begin
        Delay9_PS_8_reg[0] <= 1'b0;
        Delay9_PS_8_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_PS_8_reg[0] <= Delay9_PS_8_reg_next[0];
          Delay9_PS_8_reg[1] <= Delay9_PS_8_reg_next[1];
        end
      end
    end

  assign Delay9_PS_8_out1 = Delay9_PS_8_reg[1];
  assign Delay9_PS_8_reg_next[0] = BitSlice_out1;
  assign Delay9_PS_8_reg_next[1] = Delay9_PS_8_reg[0];



  assign Logical_Operator_out1_1 = exp_norm_cfType_Exponent_In_out1 & Delay9_PS_8_out1;



  always @(posedge clk or posedge reset)
    begin : Delay13_PS_9_process
      if (reset == 1'b1) begin
        Delay13_PS_9_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay13_PS_9_out1 <= Logical_Operator_out1_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay7_PS_8_process
      if (reset == 1'b1) begin
        Delay7_PS_8_reg[0] <= 56'h00000000000000;
        Delay7_PS_8_reg[1] <= 56'h00000000000000;
      end
      else begin
        if (enb) begin
          Delay7_PS_8_reg[0] <= Delay7_PS_8_reg_next[0];
          Delay7_PS_8_reg[1] <= Delay7_PS_8_reg_next[1];
        end
      end
    end

  assign Delay7_PS_8_out1 = Delay7_PS_8_reg[1];
  assign Delay7_PS_8_reg_next[0] = Delay_PS_6_out1;
  assign Delay7_PS_8_reg_next[1] = Delay7_PS_8_reg[0];



  assign BitSlice3_out1 = Delay_PS_6_out1[54:0];



  assign Bit_Slice2_out1_1 = BitSlice3_out1[54:48];



  assign Bit_Slice15_out1 = Bit_Slice2_out1_1[6];



  assign Bit_Slice14_out1 = Bit_Slice2_out1_1[5];



  assign Bit_Slice13_out1 = Bit_Slice2_out1_1[4];



  assign Logical_Operator7_out1 = Bit_Slice14_out1 | Bit_Slice13_out1;



  assign Logical_Operator6_out1 = Bit_Slice15_out1 | Logical_Operator7_out1;



  assign Bit_Slice12_out1 = Bit_Slice2_out1_1[3];



  assign Bit_Slice11_out1 = Bit_Slice2_out1_1[2];



  assign Logical_Operator4_out1 = Bit_Slice12_out1 | Bit_Slice11_out1;



  assign Bit_Slice10_out1 = Bit_Slice2_out1_1[1];



  assign Bit_Slice9_out1 = Bit_Slice2_out1_1[0];



  assign Logical_Operator14_out1 = Bit_Slice10_out1 | Bit_Slice9_out1;



  assign Logical_Operator13_out1 = Logical_Operator4_out1 | Logical_Operator14_out1;



  assign Logical_Operator12_out1 = Logical_Operator6_out1 | Logical_Operator13_out1;



  assign Bit_Slice9_out1_1 = BitSlice3_out1[47:40];



  assign Bit_Slice16_out1 = Bit_Slice9_out1_1[7];



  assign Bit_Slice15_out1_1 = Bit_Slice9_out1_1[6];



  assign Logical_Operator5_out1 = Bit_Slice16_out1 | Bit_Slice15_out1_1;



  assign Bit_Slice14_out1_1 = Bit_Slice9_out1_1[5];



  assign Bit_Slice13_out1_1 = Bit_Slice9_out1_1[4];



  assign Logical_Operator7_out1_1 = Bit_Slice14_out1_1 | Bit_Slice13_out1_1;



  assign Logical_Operator6_out1_1 = Logical_Operator5_out1 | Logical_Operator7_out1_1;



  assign Bit_Slice12_out1_1 = Bit_Slice9_out1_1[3];



  assign Bit_Slice11_out1_1 = Bit_Slice9_out1_1[2];



  assign Logical_Operator4_out1_1 = Bit_Slice12_out1_1 | Bit_Slice11_out1_1;



  assign Bit_Slice10_out1_1 = Bit_Slice9_out1_1[1];



  assign Bit_Slice9_out1_2 = Bit_Slice9_out1_1[0];



  assign Logical_Operator14_out1_1 = Bit_Slice10_out1_1 | Bit_Slice9_out1_2;



  assign Logical_Operator13_out1_1 = Logical_Operator4_out1_1 | Logical_Operator14_out1_1;



  assign Logical_Operator12_out1_1 = Logical_Operator6_out1_1 | Logical_Operator13_out1_1;



  assign Bit_Slice8_out1 = BitSlice3_out1[39:32];



  assign Bit_Slice16_out1_1 = Bit_Slice8_out1[7];



  assign Bit_Slice15_out1_2 = Bit_Slice8_out1[6];



  assign Logical_Operator5_out1_1 = Bit_Slice16_out1_1 | Bit_Slice15_out1_2;



  assign Bit_Slice14_out1_2 = Bit_Slice8_out1[5];



  assign Bit_Slice13_out1_2 = Bit_Slice8_out1[4];



  assign Logical_Operator7_out1_2 = Bit_Slice14_out1_2 | Bit_Slice13_out1_2;



  assign Logical_Operator6_out1_2 = Logical_Operator5_out1_1 | Logical_Operator7_out1_2;



  assign Bit_Slice12_out1_2 = Bit_Slice8_out1[3];



  assign Bit_Slice11_out1_2 = Bit_Slice8_out1[2];



  assign Logical_Operator4_out1_2 = Bit_Slice12_out1_2 | Bit_Slice11_out1_2;



  assign Bit_Slice10_out1_2 = Bit_Slice8_out1[1];



  assign Bit_Slice9_out1_3 = Bit_Slice8_out1[0];



  assign Logical_Operator14_out1_2 = Bit_Slice10_out1_2 | Bit_Slice9_out1_3;



  assign Logical_Operator13_out1_2 = Logical_Operator4_out1_2 | Logical_Operator14_out1_2;



  assign Logical_Operator12_out1_2 = Logical_Operator6_out1_2 | Logical_Operator13_out1_2;



  assign Logical_Operator2_out1 = Logical_Operator12_out1_1 | Logical_Operator12_out1_2;



  assign Bit_Slice7_out1 = BitSlice3_out1[31:24];



  assign Bit_Slice16_out1_2 = Bit_Slice7_out1[7];



  assign Bit_Slice15_out1_3 = Bit_Slice7_out1[6];



  assign Logical_Operator5_out1_2 = Bit_Slice16_out1_2 | Bit_Slice15_out1_3;



  assign Bit_Slice14_out1_3 = Bit_Slice7_out1[5];



  assign Bit_Slice13_out1_3 = Bit_Slice7_out1[4];



  assign Logical_Operator7_out1_3 = Bit_Slice14_out1_3 | Bit_Slice13_out1_3;



  assign Logical_Operator6_out1_3 = Logical_Operator5_out1_2 | Logical_Operator7_out1_3;



  assign Bit_Slice12_out1_3 = Bit_Slice7_out1[3];



  assign Bit_Slice11_out1_3 = Bit_Slice7_out1[2];



  assign Logical_Operator4_out1_3 = Bit_Slice12_out1_3 | Bit_Slice11_out1_3;



  assign Bit_Slice10_out1_3 = Bit_Slice7_out1[1];



  assign Bit_Slice9_out1_4 = Bit_Slice7_out1[0];



  assign Logical_Operator14_out1_3 = Bit_Slice10_out1_3 | Bit_Slice9_out1_4;



  assign Logical_Operator13_out1_3 = Logical_Operator4_out1_3 | Logical_Operator14_out1_3;



  assign Logical_Operator12_out1_3 = Logical_Operator6_out1_3 | Logical_Operator13_out1_3;



  assign Bit_Slice6_out1 = BitSlice3_out1[23:16];



  assign Bit_Slice16_out1_3 = Bit_Slice6_out1[7];



  assign Bit_Slice15_out1_4 = Bit_Slice6_out1[6];



  assign Logical_Operator5_out1_3 = Bit_Slice16_out1_3 | Bit_Slice15_out1_4;



  assign Bit_Slice14_out1_4 = Bit_Slice6_out1[5];



  assign Bit_Slice13_out1_4 = Bit_Slice6_out1[4];



  assign Logical_Operator7_out1_4 = Bit_Slice14_out1_4 | Bit_Slice13_out1_4;



  assign Logical_Operator6_out1_4 = Logical_Operator5_out1_3 | Logical_Operator7_out1_4;



  assign Bit_Slice12_out1_4 = Bit_Slice6_out1[3];



  assign Bit_Slice11_out1_4 = Bit_Slice6_out1[2];



  assign Logical_Operator4_out1_4 = Bit_Slice12_out1_4 | Bit_Slice11_out1_4;



  assign Bit_Slice10_out1_4 = Bit_Slice6_out1[1];



  assign Bit_Slice9_out1_5 = Bit_Slice6_out1[0];



  assign Logical_Operator14_out1_4 = Bit_Slice10_out1_4 | Bit_Slice9_out1_5;



  assign Logical_Operator13_out1_4 = Logical_Operator4_out1_4 | Logical_Operator14_out1_4;



  assign Logical_Operator12_out1_4 = Logical_Operator6_out1_4 | Logical_Operator13_out1_4;



  assign Bit_Slice1_out1 = BitSlice3_out1[15:8];



  assign Bit_Slice16_out1_4 = Bit_Slice1_out1[7];



  assign Bit_Slice15_out1_5 = Bit_Slice1_out1[6];



  assign Logical_Operator5_out1_4 = Bit_Slice16_out1_4 | Bit_Slice15_out1_5;



  assign Bit_Slice14_out1_5 = Bit_Slice1_out1[5];



  assign Bit_Slice13_out1_5 = Bit_Slice1_out1[4];



  assign Logical_Operator7_out1_5 = Bit_Slice14_out1_5 | Bit_Slice13_out1_5;



  assign Logical_Operator6_out1_5 = Logical_Operator5_out1_4 | Logical_Operator7_out1_5;



  assign Bit_Slice12_out1_5 = Bit_Slice1_out1[3];



  assign Bit_Slice11_out1_5 = Bit_Slice1_out1[2];



  assign Logical_Operator4_out1_5 = Bit_Slice12_out1_5 | Bit_Slice11_out1_5;



  assign Bit_Slice10_out1_5 = Bit_Slice1_out1[1];



  assign Bit_Slice9_out1_6 = Bit_Slice1_out1[0];



  assign Logical_Operator14_out1_5 = Bit_Slice10_out1_5 | Bit_Slice9_out1_6;



  assign Logical_Operator13_out1_5 = Logical_Operator4_out1_5 | Logical_Operator14_out1_5;



  assign Bit_Slice4_out1 = BitSlice3_out1[7:0];



  assign Bit_Slice8_out1_1 = Bit_Slice4_out1[7];



  assign Bit_Slice7_out1_1 = Bit_Slice4_out1[6];



  assign Logical_Operator1_out1_1 = Bit_Slice8_out1_1 | Bit_Slice7_out1_1;



  assign Bit_Slice6_out1_1 = Bit_Slice4_out1[5];



  assign Bit_Slice5_out1 = Bit_Slice4_out1[4];



  assign Logical_Operator3_out1 = Bit_Slice6_out1_1 | Bit_Slice5_out1;



  assign Bit_Slice3_out1 = Bit_Slice4_out1[3];



  assign Bit_Slice2_out1_2 = Bit_Slice4_out1[2];



  assign Bit_Slice1_out1_1 = Bit_Slice4_out1[1];



  assign Bit_Slice_out1_1 = Bit_Slice4_out1[0];



  assign Constant_out1_1 = 6'b110111;



  assign Constant1_out1 = 6'b110110;



  assign Switch_out1 = (Bit_Slice_out1_1 == 1'b0 ? Constant_out1_1 :
              Constant1_out1);



  assign Logical_Operator_out1_2 = Bit_Slice3_out1 | Bit_Slice2_out1_2;



  assign Constant2_out1 = 6'b110101;



  assign Switch1_out1 = (Bit_Slice1_out1_1 == 1'b0 ? Switch_out1 :
              Constant2_out1);



  assign Constant3_out1 = 6'b110100;



  assign Switch2_out1 = (Bit_Slice2_out1_2 == 1'b0 ? Constant_out1_1 :
              Constant3_out1);



  assign Constant4_out1 = 6'b110011;



  assign Logical_Operator2_out1_1 = Logical_Operator1_out1_1 | Logical_Operator3_out1;



  assign Switch3_out1 = (Bit_Slice3_out1 == 1'b0 ? Switch2_out1 :
              Constant4_out1);



  assign Switch4_out1 = (Logical_Operator_out1_2 == 1'b0 ? Switch1_out1 :
              Switch3_out1);



  assign Constant5_out1 = 6'b110010;



  assign Switch5_out1 = (Bit_Slice5_out1 == 1'b0 ? Constant_out1_1 :
              Constant5_out1);



  assign Constant6_out1 = 6'b110001;



  assign Switch6_out1 = (Bit_Slice6_out1_1 == 1'b0 ? Switch5_out1 :
              Constant6_out1);



  assign Constant7_out1 = 6'b110000;



  assign Switch7_out1 = (Bit_Slice7_out1_1 == 1'b0 ? Constant_out1_1 :
              Constant7_out1);



  assign Constant8_out1 = 6'b101111;



  assign Switch8_out1 = (Bit_Slice8_out1_1 == 1'b0 ? Switch7_out1 :
              Constant8_out1);



  assign Logical_Operator12_out1_5 = Logical_Operator6_out1_5 | Logical_Operator13_out1_5;



  assign Switch9_out1 = (Logical_Operator1_out1_1 == 1'b0 ? Switch6_out1 :
              Switch8_out1);



  assign Switch10_out1 = (Logical_Operator2_out1_1 == 1'b0 ? Switch4_out1 :
              Switch9_out1);



  assign Constant9_out1 = 6'b101110;



  assign Switch11_out1 = (Bit_Slice9_out1_6 == 1'b0 ? Constant_out1_1 :
              Constant9_out1);



  assign Constant10_out1 = 6'b101101;



  assign Switch12_out1 = (Bit_Slice10_out1_5 == 1'b0 ? Switch11_out1 :
              Constant10_out1);



  assign Constant11_out1 = 6'b101100;



  assign Switch14_out1 = (Bit_Slice11_out1_5 == 1'b0 ? Constant_out1_1 :
              Constant11_out1);



  assign Constant12_out1 = 6'b101011;



  assign Switch15_out1 = (Bit_Slice12_out1_5 == 1'b0 ? Switch14_out1 :
              Constant12_out1);



  assign Switch16_out1 = (Logical_Operator4_out1_5 == 1'b0 ? Switch12_out1 :
              Switch15_out1);



  assign Constant13_out1 = 6'b101010;



  assign Switch17_out1 = (Bit_Slice13_out1_5 == 1'b0 ? Constant_out1_1 :
              Constant13_out1);



  assign Constant14_out1 = 6'b101001;



  assign Switch18_out1 = (Bit_Slice14_out1_5 == 1'b0 ? Switch17_out1 :
              Constant14_out1);



  assign Constant15_out1 = 6'b101000;



  assign Switch19_out1 = (Bit_Slice15_out1_5 == 1'b0 ? Constant_out1_1 :
              Constant15_out1);



  assign Constant16_out1 = 6'b100111;



  assign Switch20_out1 = (Bit_Slice16_out1_4 == 1'b0 ? Switch19_out1 :
              Constant16_out1);



  assign Switch21_out1 = (Logical_Operator5_out1_4 == 1'b0 ? Switch18_out1 :
              Switch20_out1);



  assign Logical_Operator_out1_3 = Logical_Operator12_out1_3 | Logical_Operator12_out1_4;



  assign Switch13_out1 = (Logical_Operator6_out1_5 == 1'b0 ? Switch16_out1 :
              Switch21_out1);



  assign Switch_out1_1 = (Logical_Operator12_out1_5 == 1'b0 ? Switch10_out1 :
              Switch13_out1);



  assign Constant9_out1_1 = 6'b100110;



  assign Switch11_out1_1 = (Bit_Slice9_out1_5 == 1'b0 ? Constant_out1_1 :
              Constant9_out1_1);



  assign Constant10_out1_1 = 6'b100101;



  assign Switch12_out1_1 = (Bit_Slice10_out1_4 == 1'b0 ? Switch11_out1_1 :
              Constant10_out1_1);



  assign Constant11_out1_1 = 6'b100100;



  assign Switch14_out1_1 = (Bit_Slice11_out1_4 == 1'b0 ? Constant_out1_1 :
              Constant11_out1_1);



  assign Constant12_out1_1 = 6'b100011;



  assign Switch15_out1_1 = (Bit_Slice12_out1_4 == 1'b0 ? Switch14_out1_1 :
              Constant12_out1_1);



  assign Switch16_out1_1 = (Logical_Operator4_out1_4 == 1'b0 ? Switch12_out1_1 :
              Switch15_out1_1);



  assign Constant13_out1_1 = 6'b100010;



  assign Switch17_out1_1 = (Bit_Slice13_out1_4 == 1'b0 ? Constant_out1_1 :
              Constant13_out1_1);



  assign Constant14_out1_1 = 6'b100001;



  assign Switch18_out1_1 = (Bit_Slice14_out1_4 == 1'b0 ? Switch17_out1_1 :
              Constant14_out1_1);



  assign Constant15_out1_1 = 6'b100000;



  assign Switch19_out1_1 = (Bit_Slice15_out1_4 == 1'b0 ? Constant_out1_1 :
              Constant15_out1_1);



  assign Constant16_out1_1 = 6'b011111;



  assign Switch20_out1_1 = (Bit_Slice16_out1_3 == 1'b0 ? Switch19_out1_1 :
              Constant16_out1_1);



  assign Switch21_out1_1 = (Logical_Operator5_out1_3 == 1'b0 ? Switch18_out1_1 :
              Switch20_out1_1);



  assign Switch13_out1_1 = (Logical_Operator6_out1_4 == 1'b0 ? Switch16_out1_1 :
              Switch21_out1_1);



  assign Constant9_out1_2 = 6'b011110;



  assign Switch11_out1_2 = (Bit_Slice9_out1_4 == 1'b0 ? Constant_out1_1 :
              Constant9_out1_2);



  assign Constant10_out1_2 = 6'b011101;



  assign Switch12_out1_2 = (Bit_Slice10_out1_3 == 1'b0 ? Switch11_out1_2 :
              Constant10_out1_2);



  assign Constant11_out1_2 = 6'b011100;



  assign Switch14_out1_2 = (Bit_Slice11_out1_3 == 1'b0 ? Constant_out1_1 :
              Constant11_out1_2);



  assign Constant12_out1_2 = 6'b011011;



  assign Switch15_out1_2 = (Bit_Slice12_out1_3 == 1'b0 ? Switch14_out1_2 :
              Constant12_out1_2);



  assign Switch16_out1_2 = (Logical_Operator4_out1_3 == 1'b0 ? Switch12_out1_2 :
              Switch15_out1_2);



  assign Constant13_out1_2 = 6'b011010;



  assign Switch17_out1_2 = (Bit_Slice13_out1_3 == 1'b0 ? Constant_out1_1 :
              Constant13_out1_2);



  assign Constant14_out1_2 = 6'b011001;



  assign Switch18_out1_2 = (Bit_Slice14_out1_3 == 1'b0 ? Switch17_out1_2 :
              Constant14_out1_2);



  assign Constant15_out1_2 = 6'b011000;



  assign Switch19_out1_2 = (Bit_Slice15_out1_3 == 1'b0 ? Constant_out1_1 :
              Constant15_out1_2);



  assign Constant16_out1_2 = 6'b010111;



  assign Switch20_out1_2 = (Bit_Slice16_out1_2 == 1'b0 ? Switch19_out1_2 :
              Constant16_out1_2);



  assign Switch21_out1_2 = (Logical_Operator5_out1_2 == 1'b0 ? Switch18_out1_2 :
              Switch20_out1_2);



  assign Switch13_out1_2 = (Logical_Operator6_out1_3 == 1'b0 ? Switch16_out1_2 :
              Switch21_out1_2);



  assign Logical_Operator3_out1_1 = Logical_Operator12_out1 | Logical_Operator2_out1;



  assign Switch2_out1_1 = (Logical_Operator12_out1_3 == 1'b0 ? Switch13_out1_1 :
              Switch13_out1_2);



  assign Switch1_out1_1 = (Logical_Operator_out1_3 == 1'b0 ? Switch_out1_1 :
              Switch2_out1_1);



  assign Constant9_out1_3 = 6'b010110;



  assign Switch11_out1_3 = (Bit_Slice9_out1_3 == 1'b0 ? Constant_out1_1 :
              Constant9_out1_3);



  assign Constant10_out1_3 = 6'b010101;



  assign Switch12_out1_3 = (Bit_Slice10_out1_2 == 1'b0 ? Switch11_out1_3 :
              Constant10_out1_3);



  assign Constant11_out1_3 = 6'b010100;



  assign Switch14_out1_3 = (Bit_Slice11_out1_2 == 1'b0 ? Constant_out1_1 :
              Constant11_out1_3);



  assign Constant12_out1_3 = 6'b010011;



  assign Switch15_out1_3 = (Bit_Slice12_out1_2 == 1'b0 ? Switch14_out1_3 :
              Constant12_out1_3);



  assign Switch16_out1_3 = (Logical_Operator4_out1_2 == 1'b0 ? Switch12_out1_3 :
              Switch15_out1_3);



  assign Constant13_out1_3 = 6'b010010;



  assign Switch17_out1_3 = (Bit_Slice13_out1_2 == 1'b0 ? Constant_out1_1 :
              Constant13_out1_3);



  assign Constant14_out1_3 = 6'b010001;



  assign Switch18_out1_3 = (Bit_Slice14_out1_2 == 1'b0 ? Switch17_out1_3 :
              Constant14_out1_3);



  assign Constant15_out1_3 = 6'b010000;



  assign Switch19_out1_3 = (Bit_Slice15_out1_2 == 1'b0 ? Constant_out1_1 :
              Constant15_out1_3);



  assign Constant16_out1_3 = 6'b001111;



  assign Switch20_out1_3 = (Bit_Slice16_out1_1 == 1'b0 ? Switch19_out1_3 :
              Constant16_out1_3);



  assign Switch21_out1_3 = (Logical_Operator5_out1_1 == 1'b0 ? Switch18_out1_3 :
              Switch20_out1_3);



  assign Switch13_out1_3 = (Logical_Operator6_out1_2 == 1'b0 ? Switch16_out1_3 :
              Switch21_out1_3);



  assign Constant9_out1_4 = 6'b001110;



  assign Switch11_out1_4 = (Bit_Slice9_out1_2 == 1'b0 ? Constant_out1_1 :
              Constant9_out1_4);



  assign Constant10_out1_4 = 6'b001101;



  assign Switch12_out1_4 = (Bit_Slice10_out1_1 == 1'b0 ? Switch11_out1_4 :
              Constant10_out1_4);



  assign Constant11_out1_4 = 6'b001100;



  assign Switch14_out1_4 = (Bit_Slice11_out1_1 == 1'b0 ? Constant_out1_1 :
              Constant11_out1_4);



  assign Constant12_out1_4 = 6'b001011;



  assign Switch15_out1_4 = (Bit_Slice12_out1_1 == 1'b0 ? Switch14_out1_4 :
              Constant12_out1_4);



  assign Switch16_out1_4 = (Logical_Operator4_out1_1 == 1'b0 ? Switch12_out1_4 :
              Switch15_out1_4);



  assign Constant13_out1_4 = 6'b001010;



  assign Switch17_out1_4 = (Bit_Slice13_out1_1 == 1'b0 ? Constant_out1_1 :
              Constant13_out1_4);



  assign Constant14_out1_4 = 6'b001001;



  assign Switch18_out1_4 = (Bit_Slice14_out1_1 == 1'b0 ? Switch17_out1_4 :
              Constant14_out1_4);



  assign Constant15_out1_4 = 6'b001000;



  assign Switch19_out1_4 = (Bit_Slice15_out1_1 == 1'b0 ? Constant_out1_1 :
              Constant15_out1_4);



  assign Constant16_out1_4 = 6'b000111;



  assign Switch20_out1_4 = (Bit_Slice16_out1 == 1'b0 ? Switch19_out1_4 :
              Constant16_out1_4);



  assign Switch21_out1_4 = (Logical_Operator5_out1 == 1'b0 ? Switch18_out1_4 :
              Switch20_out1_4);



  assign Switch13_out1_4 = (Logical_Operator6_out1_1 == 1'b0 ? Switch16_out1_4 :
              Switch21_out1_4);



  assign Switch3_out1_1 = (Logical_Operator12_out1_1 == 1'b0 ? Switch13_out1_3 :
              Switch13_out1_4);



  assign Constant9_out1_5 = 6'b000110;



  assign Switch11_out1_5 = (Bit_Slice9_out1 == 1'b0 ? Constant_out1_1 :
              Constant9_out1_5);



  assign Constant10_out1_5 = 6'b000101;



  assign Switch12_out1_5 = (Bit_Slice10_out1 == 1'b0 ? Switch11_out1_5 :
              Constant10_out1_5);



  assign Constant11_out1_5 = 6'b000100;



  assign Switch14_out1_5 = (Bit_Slice11_out1 == 1'b0 ? Constant_out1_1 :
              Constant11_out1_5);



  assign Constant12_out1_5 = 6'b000011;



  assign Switch15_out1_5 = (Bit_Slice12_out1 == 1'b0 ? Switch14_out1_5 :
              Constant12_out1_5);



  assign Switch16_out1_5 = (Logical_Operator4_out1 == 1'b0 ? Switch12_out1_5 :
              Switch15_out1_5);



  assign Constant13_out1_5 = 6'b000010;



  assign Switch17_out1_5 = (Bit_Slice13_out1 == 1'b0 ? Constant_out1_1 :
              Constant13_out1_5);



  assign Constant14_out1_5 = 6'b000001;



  assign Switch18_out1_5 = (Bit_Slice14_out1 == 1'b0 ? Switch17_out1_5 :
              Constant14_out1_5);



  assign Constant15_out1_5 = 6'b000000;



  assign Switch19_out1_5 = (Bit_Slice15_out1 == 1'b0 ? Constant_out1_1 :
              Constant15_out1_5);



  assign Switch21_out1_5 = (Bit_Slice15_out1 == 1'b0 ? Switch18_out1_5 :
              Switch19_out1_5);



  assign Switch13_out1_5 = (Logical_Operator6_out1 == 1'b0 ? Switch16_out1_5 :
              Switch21_out1_5);



  assign Switch5_out1_1 = (Logical_Operator12_out1 == 1'b0 ? Switch3_out1_1 :
              Switch13_out1_5);



  assign Switch6_out1_1 = (Logical_Operator3_out1_1 == 1'b0 ? Switch1_out1_1 :
              Switch5_out1_1);



  always @(posedge clk or posedge reset)
    begin : Delay_PS_7_process
      if (reset == 1'b1) begin
        Delay_PS_7_out1 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay_PS_7_out1 <= Switch6_out1_1;
        end
      end
    end



  assign Bit_Slice_out1_2 = Delay2_PS_7_out1[5:0];



  assign shift_length_exp_a_cor_relop1 = Delay_PS_7_out1 >= Bit_Slice_out1_2;



  assign Bit_Slice1_out1_2 = Delay2_PS_7_out1[10:6];



  assign Compare_To_Zero_out1_1 = Bit_Slice1_out1_2 == 5'b00000;



  assign Logical_Operator1_out1_2 = shift_length_exp_a_cor_relop1 & Compare_To_Zero_out1_1;



  assign C1_out1 = 8'b00000001;



  assign exp_a_cor_1_sub_cast = C1_out1[5:0];
  assign exp_a_cor_1_out1 = Bit_Slice_out1_2 - exp_a_cor_1_sub_cast;



  assign if_shift_length_exp_a_cor_1_out1 = (Logical_Operator1_out1_2 == 1'b0 ? Delay_PS_7_out1 :
              exp_a_cor_1_out1);



  always @(posedge clk or posedge reset)
    begin : Delay6_PS_8_process
      if (reset == 1'b1) begin
        Delay6_PS_8_out1 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay6_PS_8_out1 <= if_shift_length_exp_a_cor_1_out1;
        end
      end
    end



  assign dynamic_shift_3 = {2'b0, Delay6_PS_8_out1};
  assign bitsll_Sum_shift_length_out1 = Delay7_PS_8_out1 <<< dynamic_shift_3;



  assign bitsrl_Sum_1_out1 = Delay7_PS_8_out1 >> 8'd1;



  assign if_bitget_Sum_Sum_WordLength_out1 = (Delay9_PS_8_out1 == 1'b0 ? bitsll_Sum_shift_length_out1 :
              bitsrl_Sum_1_out1);



  always @(posedge clk or posedge reset)
    begin : Delay15_PS_9_process
      if (reset == 1'b1) begin
        Delay15_PS_9_out1 <= 56'h00000000000000;
      end
      else begin
        if (enb) begin
          Delay15_PS_9_out1 <= if_bitget_Sum_Sum_WordLength_out1;
        end
      end
    end



  assign C5_out1 = 56'h00000000000000;



  assign if_exp_norm_cfType_Exponent_I_out1 = (Delay13_PS_9_out1 == 1'b0 ? Delay15_PS_9_out1 :
              C5_out1);



  assign BitSlice6_out1 = if_exp_norm_cfType_Exponent_I_out1[53:1];



  assign BitSlice5_out1 = if_exp_norm_cfType_Exponent_I_out1[0];



  assign Bit_Slice1_out1_3 = Delay6_PS_4_out1[56];



  assign Logical_Operator_out1_4 =  ~ Bit_Slice1_out1_3;



  assign Bit_Slice35_out1 = Delay6_PS_4_out1[55];



  assign Bit_Slice33_out1 = Delay6_PS_4_out1[54:52];



  assign Bit_Reduce13_out1 = (|Bit_Slice33_out1[2:0]);



  assign Bit_Slice32_out1 = Delay6_PS_4_out1[51:48];



  assign Bit_Reduce12_out1 = (|Bit_Slice32_out1[3:0]);



  assign Bit_Slice30_out1 = Delay6_PS_4_out1[47:44];



  assign Bit_Reduce11_out1 = (|Bit_Slice30_out1[3:0]);



  assign Bit_Slice24_out1 = Delay6_PS_4_out1[43:40];



  assign Bit_Reduce10_out1 = (|Bit_Slice24_out1[3:0]);



  assign Bit_Slice28_out1 = Delay6_PS_4_out1[39:36];



  assign Bit_Reduce9_out1 = (|Bit_Slice28_out1[3:0]);



  assign Bit_Slice22_out1 = Delay6_PS_4_out1[35:32];



  assign Bit_Reduce8_out1 = (|Bit_Slice22_out1[3:0]);



  assign Bit_Slice20_out1 = Delay6_PS_4_out1[31:28];



  assign Bit_Reduce7_out1 = (|Bit_Slice20_out1[3:0]);



  assign Bit_Slice16_out1_5 = Delay6_PS_4_out1[27:24];



  assign Bit_Reduce6_out1 = (|Bit_Slice16_out1_5[3:0]);



  assign Bit_Slice14_out1_6 = Delay6_PS_4_out1[23:20];



  assign Bit_Reduce5_out1 = (|Bit_Slice14_out1_6[3:0]);



  assign Bit_Slice18_out1 = Delay6_PS_4_out1[19:16];



  assign Bit_Reduce4_out1 = (|Bit_Slice18_out1[3:0]);



  assign Bit_Slice12_out1_6 = Delay6_PS_4_out1[15:12];



  assign Bit_Reduce3_out1 = (|Bit_Slice12_out1_6[3:0]);



  assign Bit_Slice10_out1_6 = Delay6_PS_4_out1[11:8];



  assign Bit_Reduce2_out1 = (|Bit_Slice10_out1_6[3:0]);



  assign Bit_Slice8_out1_2 = Delay6_PS_4_out1[7:4];



  assign Bit_Reduce1_out1 = (|Bit_Slice8_out1_2[3:0]);



  assign Bit_Slice6_out1_2 = Delay6_PS_4_out1[3:0];



  assign Bit_Reduce_out1 = (|Bit_Slice6_out1_2[3:0]);



  assign Logical_Operator1_out1_3 = Bit_Reduce1_out1 | Bit_Reduce_out1;



  assign Logical_Operator2_out1_2 = Bit_Reduce2_out1 | Logical_Operator1_out1_3;



  assign Logical_Operator3_out1_2 = Bit_Reduce3_out1 | Logical_Operator2_out1_2;



  assign Logical_Operator4_out1_6 = Bit_Reduce4_out1 | Logical_Operator3_out1_2;



  assign Logical_Operator5_out1_5 = Bit_Reduce5_out1 | Logical_Operator4_out1_6;



  assign Logical_Operator6_out1_6 = Bit_Reduce6_out1 | Logical_Operator5_out1_5;



  assign Logical_Operator7_out1_6 = Bit_Reduce7_out1 | Logical_Operator6_out1_6;



  assign Logical_Operator8_out1 = Bit_Reduce8_out1 | Logical_Operator7_out1_6;



  assign Logical_Operator9_out1 = Bit_Reduce9_out1 | Logical_Operator8_out1;



  assign Logical_Operator10_out1 = Bit_Reduce10_out1 | Logical_Operator9_out1;



  assign Logical_Operator12_out1_6 = Bit_Reduce11_out1 | Logical_Operator10_out1;



  assign Logical_Operator13_out1_6 = Bit_Reduce12_out1 | Logical_Operator12_out1_6;



  assign Logical_Operator14_out1_6 = Bit_Reduce13_out1 | Logical_Operator13_out1_6;



  assign Logical_Operator11_out1 = Bit_Slice35_out1 | Logical_Operator14_out1_6;



  assign Logical_Operator_out1_5 = Logical_Operator_out1_4 & Logical_Operator11_out1;



  assign Bit_Slice1_out1_4 = Delay7_PS_4_out1[2];



  assign Logical_Operator2_out1_3 = Logical_Operator_out1_5 & Bit_Slice1_out1_4;



  assign Bit_Slice5_out1_1 = Delay7_PS_4_out1[0];



  assign Logical_Operator2_out1_4 =  ~ Bit_Slice5_out1_1;



  assign Bit_Slice2_out1_3 = Delay7_PS_4_out1[1];



  assign Logical_Operator_out1_6 =  ~ Bit_Slice2_out1_3;



  assign Logical_Operator1_out1_4 = Logical_Operator2_out1_4 & Logical_Operator_out1_6;



  assign Switch_out1_2 = (Logical_Operator1_out1_4 == 1'b0 ? Logical_Operator_out1_5 :
              Logical_Operator11_out1);



  assign Logical_Operator1_out1_5 = Logical_Operator2_out1_3 | Switch_out1_2;



  assign Bit_Slice3_out1_1 = Delay7_PS_4_out1[3];



  assign Bit_Slice2_out1_4 = Bit_Slice33_out1[2];



  assign Logical_Operator2_out1_5 = Bit_Slice2_out1_4 & Bit_Slice5_out1_1;



  assign Bit_Slice1_out1_5 = Bit_Slice33_out1[1];



  assign Logical_Operator1_out1_6 = Logical_Operator2_out1_5 | Bit_Slice1_out1_5;



  assign Logical_Operator4_out1_7 = Logical_Operator1_out1_6 & Bit_Slice2_out1_3;



  assign Bit_Slice_out1_3 = Bit_Slice33_out1[0];



  assign Logical_Operator7_out1_7 = Bit_Slice5_out1_1 | Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_3 = Bit_Slice_out1_3 & Logical_Operator7_out1_7;



  assign Logical_Operator6_out1_7 = Logical_Operator3_out1_3 | Logical_Operator13_out1_6;



  assign Logical_Operator5_out1_6 = Logical_Operator4_out1_7 | Logical_Operator6_out1_7;



  assign Bit_Slice31_out1 = Delay6_PS_4_out1[50:48];



  assign Bit_Slice2_out1_5 = Bit_Slice31_out1[2];



  assign Logical_Operator2_out1_6 = Bit_Slice2_out1_5 & Bit_Slice5_out1_1;



  assign Bit_Slice1_out1_6 = Bit_Slice31_out1[1];



  assign Logical_Operator1_out1_7 = Logical_Operator2_out1_6 | Bit_Slice1_out1_6;



  assign Logical_Operator4_out1_8 = Logical_Operator1_out1_7 & Bit_Slice2_out1_3;



  assign Bit_Slice_out1_4 = Bit_Slice31_out1[0];



  assign Logical_Operator7_out1_8 = Bit_Slice5_out1_1 | Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_4 = Bit_Slice_out1_4 & Logical_Operator7_out1_8;



  assign Logical_Operator4_out1_9 = Logical_Operator1_out1_5 & Bit_Slice3_out1_1;



  assign Logical_Operator3_out1_5 = Logical_Operator5_out1_6 & Bit_Slice1_out1_4;



  assign Logical_Operator6_out1_8 = Logical_Operator3_out1_4 | Logical_Operator12_out1_6;



  assign Logical_Operator5_out1_7 = Logical_Operator4_out1_8 | Logical_Operator6_out1_8;



  assign Logical_Operator6_out1_9 = Logical_Operator3_out1_5 | Logical_Operator5_out1_7;



  assign Logical_Operator5_out1_8 = Logical_Operator4_out1_9 | Logical_Operator6_out1_9;



  assign Bit_Slice4_out1_1 = Delay7_PS_4_out1[4];



  assign Bit_Slice25_out1 = Delay6_PS_4_out1[46:44];



  assign Bit_Slice2_out1_6 = Bit_Slice25_out1[2];



  assign Logical_Operator2_out1_7 = Bit_Slice2_out1_6 & Bit_Slice5_out1_1;



  assign Bit_Slice1_out1_7 = Bit_Slice25_out1[1];



  assign Logical_Operator1_out1_8 = Logical_Operator2_out1_7 | Bit_Slice1_out1_7;



  assign Logical_Operator4_out1_10 = Logical_Operator1_out1_8 & Bit_Slice2_out1_3;



  assign Bit_Slice_out1_5 = Bit_Slice25_out1[0];



  assign Logical_Operator7_out1_9 = Bit_Slice5_out1_1 | Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_6 = Bit_Slice_out1_5 & Logical_Operator7_out1_9;



  assign Logical_Operator6_out1_10 = Logical_Operator3_out1_6 | Logical_Operator10_out1;



  assign Logical_Operator5_out1_9 = Logical_Operator4_out1_10 | Logical_Operator6_out1_10;



  assign Bit_Slice29_out1 = Delay6_PS_4_out1[42:40];



  assign Bit_Slice2_out1_7 = Bit_Slice29_out1[2];



  assign Logical_Operator2_out1_8 = Bit_Slice2_out1_7 & Bit_Slice5_out1_1;



  assign Bit_Slice1_out1_8 = Bit_Slice29_out1[1];



  assign Logical_Operator1_out1_9 = Logical_Operator2_out1_8 | Bit_Slice1_out1_8;



  assign Logical_Operator4_out1_11 = Logical_Operator1_out1_9 & Bit_Slice2_out1_3;



  assign Bit_Slice_out1_6 = Bit_Slice29_out1[0];



  assign Logical_Operator7_out1_10 = Bit_Slice5_out1_1 | Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_7 = Bit_Slice_out1_6 & Logical_Operator7_out1_10;



  assign Logical_Operator2_out1_9 = Logical_Operator5_out1_9 & Bit_Slice1_out1_4;



  assign Logical_Operator6_out1_11 = Logical_Operator3_out1_7 | Logical_Operator9_out1;



  assign Logical_Operator5_out1_10 = Logical_Operator4_out1_11 | Logical_Operator6_out1_11;



  assign Logical_Operator1_out1_10 = Logical_Operator2_out1_9 | Logical_Operator5_out1_10;



  assign Bit_Slice23_out1 = Delay6_PS_4_out1[38:36];



  assign Bit_Slice2_out1_8 = Bit_Slice23_out1[2];



  assign Logical_Operator2_out1_10 = Bit_Slice2_out1_8 & Bit_Slice5_out1_1;



  assign Bit_Slice1_out1_9 = Bit_Slice23_out1[1];



  assign Logical_Operator1_out1_11 = Logical_Operator2_out1_10 | Bit_Slice1_out1_9;



  assign Logical_Operator4_out1_12 = Logical_Operator1_out1_11 & Bit_Slice2_out1_3;



  assign Bit_Slice_out1_7 = Bit_Slice23_out1[0];



  assign Logical_Operator7_out1_11 = Bit_Slice5_out1_1 | Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_8 = Bit_Slice_out1_7 & Logical_Operator7_out1_11;



  assign Logical_Operator6_out1_12 = Logical_Operator3_out1_8 | Logical_Operator8_out1;



  assign Logical_Operator5_out1_11 = Logical_Operator4_out1_12 | Logical_Operator6_out1_12;



  assign Bit_Slice21_out1 = Delay6_PS_4_out1[34:32];



  assign Bit_Slice2_out1_9 = Bit_Slice21_out1[2];



  assign Logical_Operator2_out1_11 = Bit_Slice2_out1_9 & Bit_Slice5_out1_1;



  assign Bit_Slice1_out1_10 = Bit_Slice21_out1[1];



  assign Logical_Operator1_out1_12 = Logical_Operator2_out1_11 | Bit_Slice1_out1_10;



  assign Logical_Operator4_out1_13 = Logical_Operator1_out1_12 & Bit_Slice2_out1_3;



  assign Bit_Slice_out1_8 = Bit_Slice21_out1[0];



  assign Logical_Operator7_out1_12 = Bit_Slice5_out1_1 | Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_9 = Bit_Slice_out1_8 & Logical_Operator7_out1_12;



  assign Logical_Operator2_out1_12 = Logical_Operator5_out1_8 & Bit_Slice4_out1_1;



  assign Logical_Operator4_out1_14 = Logical_Operator1_out1_10 & Bit_Slice3_out1_1;



  assign Logical_Operator3_out1_10 = Logical_Operator5_out1_11 & Bit_Slice1_out1_4;



  assign Logical_Operator6_out1_13 = Logical_Operator3_out1_9 | Logical_Operator7_out1_6;



  assign Logical_Operator5_out1_12 = Logical_Operator4_out1_13 | Logical_Operator6_out1_13;



  assign Logical_Operator6_out1_14 = Logical_Operator3_out1_10 | Logical_Operator5_out1_12;



  assign Logical_Operator5_out1_13 = Logical_Operator4_out1_14 | Logical_Operator6_out1_14;



  assign Logical_Operator1_out1_13 = Logical_Operator2_out1_12 | Logical_Operator5_out1_13;



  assign Bit_Slice17_out1 = Delay6_PS_4_out1[30:28];



  assign Bit_Slice2_out1_10 = Bit_Slice17_out1[2];



  assign Logical_Operator2_out1_13 = Bit_Slice2_out1_10 & Bit_Slice5_out1_1;



  assign Bit_Slice1_out1_11 = Bit_Slice17_out1[1];



  assign Logical_Operator1_out1_14 = Logical_Operator2_out1_13 | Bit_Slice1_out1_11;



  assign Logical_Operator4_out1_15 = Logical_Operator1_out1_14 & Bit_Slice2_out1_3;



  assign Bit_Slice_out1_9 = Bit_Slice17_out1[0];



  assign Logical_Operator7_out1_13 = Bit_Slice5_out1_1 | Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_11 = Bit_Slice_out1_9 & Logical_Operator7_out1_13;



  assign Logical_Operator6_out1_15 = Logical_Operator3_out1_11 | Logical_Operator6_out1_6;



  assign Logical_Operator5_out1_14 = Logical_Operator4_out1_15 | Logical_Operator6_out1_15;



  assign Bit_Slice15_out1_6 = Delay6_PS_4_out1[26:24];



  assign Bit_Slice2_out1_11 = Bit_Slice15_out1_6[2];



  assign Logical_Operator2_out1_14 = Bit_Slice2_out1_11 & Bit_Slice5_out1_1;



  assign Bit_Slice1_out1_12 = Bit_Slice15_out1_6[1];



  assign Logical_Operator1_out1_15 = Logical_Operator2_out1_14 | Bit_Slice1_out1_12;



  assign Logical_Operator4_out1_16 = Logical_Operator1_out1_15 & Bit_Slice2_out1_3;



  assign Bit_Slice_out1_10 = Bit_Slice15_out1_6[0];



  assign Logical_Operator7_out1_14 = Bit_Slice5_out1_1 | Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_12 = Bit_Slice_out1_10 & Logical_Operator7_out1_14;



  assign Logical_Operator2_out1_15 = Logical_Operator5_out1_14 & Bit_Slice1_out1_4;



  assign Logical_Operator6_out1_16 = Logical_Operator3_out1_12 | Logical_Operator5_out1_5;



  assign Logical_Operator5_out1_15 = Logical_Operator4_out1_16 | Logical_Operator6_out1_16;



  assign Logical_Operator1_out1_16 = Logical_Operator2_out1_15 | Logical_Operator5_out1_15;



  assign Bit_Slice19_out1 = Delay6_PS_4_out1[22:20];



  assign Bit_Slice2_out1_12 = Bit_Slice19_out1[2];



  assign Logical_Operator2_out1_16 = Bit_Slice2_out1_12 & Bit_Slice5_out1_1;



  assign Bit_Slice1_out1_13 = Bit_Slice19_out1[1];



  assign Logical_Operator1_out1_17 = Logical_Operator2_out1_16 | Bit_Slice1_out1_13;



  assign Logical_Operator4_out1_17 = Logical_Operator1_out1_17 & Bit_Slice2_out1_3;



  assign Bit_Slice_out1_11 = Bit_Slice19_out1[0];



  assign Logical_Operator7_out1_15 = Bit_Slice5_out1_1 | Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_13 = Bit_Slice_out1_11 & Logical_Operator7_out1_15;



  assign Logical_Operator6_out1_17 = Logical_Operator3_out1_13 | Logical_Operator4_out1_6;



  assign Logical_Operator5_out1_16 = Logical_Operator4_out1_17 | Logical_Operator6_out1_17;



  assign Bit_Slice13_out1_6 = Delay6_PS_4_out1[18:16];



  assign Bit_Slice2_out1_13 = Bit_Slice13_out1_6[2];



  assign Logical_Operator2_out1_17 = Bit_Slice2_out1_13 & Bit_Slice5_out1_1;



  assign Bit_Slice1_out1_14 = Bit_Slice13_out1_6[1];



  assign Logical_Operator1_out1_18 = Logical_Operator2_out1_17 | Bit_Slice1_out1_14;



  assign Logical_Operator4_out1_18 = Logical_Operator1_out1_18 & Bit_Slice2_out1_3;



  assign Bit_Slice_out1_12 = Bit_Slice13_out1_6[0];



  assign Logical_Operator7_out1_16 = Bit_Slice5_out1_1 | Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_14 = Bit_Slice_out1_12 & Logical_Operator7_out1_16;



  assign Logical_Operator4_out1_19 = Logical_Operator1_out1_16 & Bit_Slice3_out1_1;



  assign Logical_Operator3_out1_15 = Logical_Operator5_out1_16 & Bit_Slice1_out1_4;



  assign Logical_Operator6_out1_18 = Logical_Operator3_out1_14 | Logical_Operator3_out1_2;



  assign Logical_Operator5_out1_17 = Logical_Operator4_out1_18 | Logical_Operator6_out1_18;



  assign Logical_Operator6_out1_19 = Logical_Operator3_out1_15 | Logical_Operator5_out1_17;



  assign Logical_Operator5_out1_18 = Logical_Operator4_out1_19 | Logical_Operator6_out1_19;



  assign Bit_Slice11_out1_6 = Delay6_PS_4_out1[14:12];



  assign Bit_Slice2_out1_14 = Bit_Slice11_out1_6[2];



  assign Logical_Operator2_out1_18 = Bit_Slice2_out1_14 & Bit_Slice5_out1_1;



  assign Bit_Slice1_out1_15 = Bit_Slice11_out1_6[1];



  assign Logical_Operator1_out1_19 = Logical_Operator2_out1_18 | Bit_Slice1_out1_15;



  assign Logical_Operator4_out1_20 = Logical_Operator1_out1_19 & Bit_Slice2_out1_3;



  assign Bit_Slice_out1_13 = Bit_Slice11_out1_6[0];



  assign Logical_Operator7_out1_17 = Bit_Slice5_out1_1 | Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_16 = Bit_Slice_out1_13 & Logical_Operator7_out1_17;



  assign Logical_Operator6_out1_20 = Logical_Operator3_out1_16 | Logical_Operator2_out1_2;



  assign Logical_Operator5_out1_19 = Logical_Operator4_out1_20 | Logical_Operator6_out1_20;



  assign Bit_Slice9_out1_7 = Delay6_PS_4_out1[10:8];



  assign Bit_Slice2_out1_15 = Bit_Slice9_out1_7[2];



  assign Logical_Operator2_out1_19 = Bit_Slice2_out1_15 & Bit_Slice5_out1_1;



  assign Bit_Slice1_out1_16 = Bit_Slice9_out1_7[1];



  assign Logical_Operator1_out1_20 = Logical_Operator2_out1_19 | Bit_Slice1_out1_16;



  assign Logical_Operator4_out1_21 = Logical_Operator1_out1_20 & Bit_Slice2_out1_3;



  assign Bit_Slice_out1_14 = Bit_Slice9_out1_7[0];



  assign Logical_Operator7_out1_18 = Bit_Slice5_out1_1 | Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_17 = Bit_Slice_out1_14 & Logical_Operator7_out1_18;



  assign Logical_Operator2_out1_20 = Logical_Operator5_out1_19 & Bit_Slice1_out1_4;



  assign Logical_Operator6_out1_21 = Logical_Operator3_out1_17 | Logical_Operator1_out1_3;



  assign Logical_Operator5_out1_20 = Logical_Operator4_out1_21 | Logical_Operator6_out1_21;



  assign Logical_Operator1_out1_21 = Logical_Operator2_out1_20 | Logical_Operator5_out1_20;



  assign Bit_Slice7_out1_2 = Delay6_PS_4_out1[6:4];



  assign Bit_Slice2_out1_16 = Bit_Slice7_out1_2[2];



  assign Logical_Operator2_out1_21 = Bit_Slice2_out1_16 & Bit_Slice5_out1_1;



  assign Bit_Slice1_out1_17 = Bit_Slice7_out1_2[1];



  assign Logical_Operator1_out1_22 = Logical_Operator2_out1_21 | Bit_Slice1_out1_17;



  assign Logical_Operator4_out1_22 = Logical_Operator1_out1_22 & Bit_Slice2_out1_3;



  assign Bit_Slice_out1_15 = Bit_Slice7_out1_2[0];



  assign Logical_Operator7_out1_19 = Bit_Slice5_out1_1 | Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_18 = Bit_Slice_out1_15 & Logical_Operator7_out1_19;



  assign Logical_Operator6_out1_22 = Logical_Operator3_out1_18 | Bit_Reduce_out1;



  assign Logical_Operator5_out1_21 = Logical_Operator4_out1_22 | Logical_Operator6_out1_22;



  assign Bit_Slice_out1_16 = Delay6_PS_4_out1[2:0];



  assign Bit_Slice2_out1_17 = Bit_Slice_out1_16[2];



  assign Logical_Operator2_out1_22 = Bit_Slice2_out1_17 & Bit_Slice5_out1_1;



  assign Bit_Slice1_out1_18 = Bit_Slice_out1_16[1];



  assign Logical_Operator1_out1_23 = Logical_Operator2_out1_22 | Bit_Slice1_out1_18;



  assign Bit_Slice_out1_17 = Bit_Slice_out1_16[0];



  assign Logical_Operator7_out1_20 = Bit_Slice5_out1_1 | Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_19 = Bit_Slice_out1_17 & Logical_Operator7_out1_20;



  assign Bit_Slice27_out1 = Delay7_PS_4_out1[5];



  assign Logical_Operator4_out1_23 = Logical_Operator1_out1_13 & Bit_Slice27_out1;



  assign Logical_Operator3_out1_20 = Logical_Operator5_out1_18 & Bit_Slice4_out1_1;



  assign Logical_Operator4_out1_24 = Logical_Operator1_out1_21 & Bit_Slice3_out1_1;



  assign Logical_Operator3_out1_21 = Logical_Operator5_out1_21 & Bit_Slice1_out1_4;



  assign Logical_Operator4_out1_25 = Logical_Operator1_out1_23 & Bit_Slice2_out1_3;



  assign Constant_out1_2 = 1'b0;



  assign Logical_Operator6_out1_23 = Logical_Operator3_out1_19 | Constant_out1_2;



  assign Logical_Operator5_out1_22 = Logical_Operator4_out1_25 | Logical_Operator6_out1_23;



  assign Logical_Operator6_out1_24 = Logical_Operator3_out1_21 | Logical_Operator5_out1_22;



  assign Logical_Operator5_out1_23 = Logical_Operator4_out1_24 | Logical_Operator6_out1_24;



  assign Logical_Operator6_out1_25 = Logical_Operator3_out1_20 | Logical_Operator5_out1_23;



  assign Logical_Operator5_out1_24 = Logical_Operator4_out1_23 | Logical_Operator6_out1_25;



  always @(posedge clk or posedge reset)
    begin : Delay1_PS_5_1_process
      if (reset == 1'b1) begin
        Delay1_PS_5_out1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_PS_5_out1_1 <= Logical_Operator5_out1_24;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay6_PS_6_process
      if (reset == 1'b1) begin
        Delay6_PS_6_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_PS_6_out1 <= Delay1_PS_5_out1_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_PS_8_process
      if (reset == 1'b1) begin
        Delay11_PS_8_reg[0] <= 1'b0;
        Delay11_PS_8_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_PS_8_reg[0] <= Delay11_PS_8_reg_next[0];
          Delay11_PS_8_reg[1] <= Delay11_PS_8_reg_next[1];
        end
      end
    end

  assign Delay11_PS_8_out1 = Delay11_PS_8_reg[1];
  assign Delay11_PS_8_reg_next[0] = Delay6_PS_6_out1;
  assign Delay11_PS_8_reg_next[1] = Delay11_PS_8_reg[0];



  assign BitSlice1_out1 = Delay_PS_6_out1[0];



  assign sticky_bitget_Sum_1_out1 = BitSlice1_out1 | Delay6_PS_6_out1;



  always @(posedge clk or posedge reset)
    begin : Delay10_PS_8_process
      if (reset == 1'b1) begin
        Delay10_PS_8_reg[0] <= 1'b0;
        Delay10_PS_8_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_PS_8_reg[0] <= Delay10_PS_8_reg_next[0];
          Delay10_PS_8_reg[1] <= Delay10_PS_8_reg_next[1];
        end
      end
    end

  assign Delay10_PS_8_out1 = Delay10_PS_8_reg[1];
  assign Delay10_PS_8_reg_next[0] = sticky_bitget_Sum_1_out1;
  assign Delay10_PS_8_reg_next[1] = Delay10_PS_8_reg[0];



  assign if_bitget_Sum_Sum_WordLength_2_out1 = (Delay9_PS_8_out1 == 1'b0 ? Delay11_PS_8_out1 :
              Delay10_PS_8_out1);



  assign BitSlice_out1_1 = BitSlice6_out1[0];



  assign BitSlice1_out1_1 = BitSlice6_out1[1];



  always @(posedge clk or posedge reset)
    begin : Delay19_PS_9_process
      if (reset == 1'b1) begin
        Delay19_PS_9_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay19_PS_9_out1 <= if_bitget_Sum_Sum_WordLength_2_out1;
        end
      end
    end



  assign sticky_bitget_Sum_1_out1_1 = BitSlice5_out1 | Delay19_PS_9_out1;



  assign alphabitget_Mant_tmp_2_0_out1 = BitSlice1_out1_1 | sticky_bitget_Sum_1_out1_1;



  assign alphabitget_Mant_tmp_1_0_out1 = BitSlice_out1_1 & alphabitget_Mant_tmp_2_0_out1;



  assign alpha0_out1_2 = 1'b0;



  assign BitSlice4_out1 = BitSlice6_out1[52:1];



  assign Bit_Concat_out1_2 = {alpha0_out1_2, BitSlice4_out1};



  assign cast_2_like_Mant_tmp_out1 = 53'h00000000000001;



  assign Mant_tmp_cast_2_like_Man_out1 = Bit_Concat_out1_2 + cast_2_like_Mant_tmp_out1;



  assign if_bitget_Mant_tmp_1_0_out1 = (alphabitget_Mant_tmp_1_0_out1 == 1'b0 ? Bit_Concat_out1_2 :
              Mant_tmp_cast_2_like_Man_out1);



  always @(posedge clk or posedge reset)
    begin : Delay_PS_10_process
      if (reset == 1'b1) begin
        Delay_PS_10_out1 <= 53'h00000000000000;
      end
      else begin
        if (enb) begin
          Delay_PS_10_out1 <= if_bitget_Mant_tmp_1_0_out1;
        end
      end
    end



  assign BitSlice2_out1 = Delay_PS_10_out1[52];



  assign BitSlice4_out1_1 = Delay15_PS_9_out1[54];



  assign C4_out1 = 11'b00000000000;



  assign Sum_0_out1 = Delay7_PS_8_out1 == 56'h00000000000000;



  assign exp_a_cor_shift_length_1 = {5'b0, Delay_PS_7_out1};
  assign exp_a_cor_shift_length_out1 = Delay2_PS_7_out1 - exp_a_cor_shift_length_1;



  assign C2_out1 = 11'b00000000001;



  assign if_shift_length_exp_a_cor_out1 = (Logical_Operator1_out1_2 == 1'b0 ? exp_a_cor_shift_length_out1 :
              C2_out1);



  always @(posedge clk or posedge reset)
    begin : Delay5_PS_8_process
      if (reset == 1'b1) begin
        Delay5_PS_8_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay5_PS_8_out1 <= if_shift_length_exp_a_cor_out1;
        end
      end
    end



  assign BitSlice2_out1_1 = Delay7_PS_8_out1[54];



  assign C3_out1 = 11'b00000000000;



  assign if_Sum_0_out1 = (Sum_0_out1 == 1'b0 ? Delay5_PS_8_out1 :
              C3_out1);



  assign if_bitget_Sum_Sum_WordLength_1_out1 = (BitSlice2_out1_1 == 1'b0 ? if_Sum_0_out1 :
              Delay8_PS_8_out1);



  assign C_out1_2 = 11'b00000000001;



  assign exp_a_cor_1_out1_1 = C_out1_2 + Delay8_PS_8_out1;



  assign if_bitget_Sum_Sum_WordLength_1_out1_1 = (Delay9_PS_8_out1 == 1'b0 ? if_bitget_Sum_Sum_WordLength_1_out1 :
              exp_a_cor_1_out1_1);



  always @(posedge clk or posedge reset)
    begin : Delay14_PS_9_process
      if (reset == 1'b1) begin
        Delay14_PS_9_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay14_PS_9_out1 <= if_bitget_Sum_Sum_WordLength_1_out1_1;
        end
      end
    end



  assign if_bitget_Sum_Sum_WordLength_out1_1 = (BitSlice4_out1_1 == 1'b0 ? C4_out1 :
              Delay14_PS_9_out1);



  always @(posedge clk or posedge reset)
    begin : Delay1_PS_10_process
      if (reset == 1'b1) begin
        Delay1_PS_10_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS_10_out1 <= if_bitget_Sum_Sum_WordLength_out1_1;
        end
      end
    end



  assign cast_1_like_Exp_out1 = 11'b00000000001;



  assign Exp_cast_1_like_Exp_out1 = Delay1_PS_10_out1 + cast_1_like_Exp_out1;



  assign if_bitget_Mant_tmp_Mant_tmp_Wor_out1 = (BitSlice2_out1 == 1'b0 ? Delay1_PS_10_out1 :
              Exp_cast_1_like_Exp_out1);



  assign Exponent_0_out1_2 = if_bitget_Mant_tmp_Mant_tmp_Wor_out1 == 11'b00000000000;



  assign BitSlice3_out1_1 = Delay_PS_10_out1[51:0];



  assign Mantissa_0_out1 = BitSlice3_out1_1 == 52'h0000000000000;



  assign alphaExponent_0_Mantissa_out1 = Exponent_0_out1_2 & Mantissa_0_out1;



  assign Constant_out1_3 = 1'b0;



  assign Switch_out1_3 = (Delay18_PS_7_10_out1 == 1'b0 ? alphaExponent_0_Mantissa_out1 :
              Constant_out1_3);



  always @(posedge clk or posedge reset)
    begin : Delay14_PS_7_10_process
      if (reset == 1'b1) begin
        Delay14_PS_7_10_reg[0] <= 1'b0;
        Delay14_PS_7_10_reg[1] <= 1'b0;
        Delay14_PS_7_10_reg[2] <= 1'b0;
        Delay14_PS_7_10_reg[3] <= 1'b0;
        Delay14_PS_7_10_reg[4] <= 1'b0;
        Delay14_PS_7_10_reg[5] <= 1'b0;
        Delay14_PS_7_10_reg[6] <= 1'b0;
        Delay14_PS_7_10_reg[7] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay14_PS_7_10_reg[0] <= Delay14_PS_7_10_reg_next[0];
          Delay14_PS_7_10_reg[1] <= Delay14_PS_7_10_reg_next[1];
          Delay14_PS_7_10_reg[2] <= Delay14_PS_7_10_reg_next[2];
          Delay14_PS_7_10_reg[3] <= Delay14_PS_7_10_reg_next[3];
          Delay14_PS_7_10_reg[4] <= Delay14_PS_7_10_reg_next[4];
          Delay14_PS_7_10_reg[5] <= Delay14_PS_7_10_reg_next[5];
          Delay14_PS_7_10_reg[6] <= Delay14_PS_7_10_reg_next[6];
          Delay14_PS_7_10_reg[7] <= Delay14_PS_7_10_reg_next[7];
        end
      end
    end

  assign Delay14_PS_7_10_out1 = Delay14_PS_7_10_reg[7];
  assign Delay14_PS_7_10_reg_next[0] = if_bitconcat_aExponent_aMantiss_2_out1;
  assign Delay14_PS_7_10_reg_next[1] = Delay14_PS_7_10_reg[0];
  assign Delay14_PS_7_10_reg_next[2] = Delay14_PS_7_10_reg[1];
  assign Delay14_PS_7_10_reg_next[3] = Delay14_PS_7_10_reg[2];
  assign Delay14_PS_7_10_reg_next[4] = Delay14_PS_7_10_reg[3];
  assign Delay14_PS_7_10_reg_next[5] = Delay14_PS_7_10_reg[4];
  assign Delay14_PS_7_10_reg_next[6] = Delay14_PS_7_10_reg[5];
  assign Delay14_PS_7_10_reg_next[7] = Delay14_PS_7_10_reg[6];



  assign alphaaSign_1_bSign_1_out1 = if_bitconcat_aExponent_aMantiss_2_out1 & if_bitconcat_aExponent_aMantiss_5_out1;



  always @(posedge clk or posedge reset)
    begin : Delay13_PS_7_10_process
      if (reset == 1'b1) begin
        Delay13_PS_7_10_reg[0] <= 1'b0;
        Delay13_PS_7_10_reg[1] <= 1'b0;
        Delay13_PS_7_10_reg[2] <= 1'b0;
        Delay13_PS_7_10_reg[3] <= 1'b0;
        Delay13_PS_7_10_reg[4] <= 1'b0;
        Delay13_PS_7_10_reg[5] <= 1'b0;
        Delay13_PS_7_10_reg[6] <= 1'b0;
        Delay13_PS_7_10_reg[7] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay13_PS_7_10_reg[0] <= Delay13_PS_7_10_reg_next[0];
          Delay13_PS_7_10_reg[1] <= Delay13_PS_7_10_reg_next[1];
          Delay13_PS_7_10_reg[2] <= Delay13_PS_7_10_reg_next[2];
          Delay13_PS_7_10_reg[3] <= Delay13_PS_7_10_reg_next[3];
          Delay13_PS_7_10_reg[4] <= Delay13_PS_7_10_reg_next[4];
          Delay13_PS_7_10_reg[5] <= Delay13_PS_7_10_reg_next[5];
          Delay13_PS_7_10_reg[6] <= Delay13_PS_7_10_reg_next[6];
          Delay13_PS_7_10_reg[7] <= Delay13_PS_7_10_reg_next[7];
        end
      end
    end

  assign Delay13_PS_7_10_out1 = Delay13_PS_7_10_reg[7];
  assign Delay13_PS_7_10_reg_next[0] = alphaaSign_1_bSign_1_out1;
  assign Delay13_PS_7_10_reg_next[1] = Delay13_PS_7_10_reg[0];
  assign Delay13_PS_7_10_reg_next[2] = Delay13_PS_7_10_reg[1];
  assign Delay13_PS_7_10_reg_next[3] = Delay13_PS_7_10_reg[2];
  assign Delay13_PS_7_10_reg_next[4] = Delay13_PS_7_10_reg[3];
  assign Delay13_PS_7_10_reg_next[5] = Delay13_PS_7_10_reg[4];
  assign Delay13_PS_7_10_reg_next[6] = Delay13_PS_7_10_reg[5];
  assign Delay13_PS_7_10_reg_next[7] = Delay13_PS_7_10_reg[6];



  assign if_Exponent_0_Mantissa_out1 = (Switch_out1_3 == 1'b0 ? Delay14_PS_7_10_out1 :
              Delay13_PS_7_10_out1);



  always @(posedge clk or posedge reset)
    begin : Delay6_PS_11_process
      if (reset == 1'b1) begin
        Delay6_PS_11_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_PS_11_out1 <= if_Exponent_0_Mantissa_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay15_PS_7_10_process
      if (reset == 1'b1) begin
        Delay15_PS_7_10_reg[0] <= 11'b00000000000;
        Delay15_PS_7_10_reg[1] <= 11'b00000000000;
        Delay15_PS_7_10_reg[2] <= 11'b00000000000;
        Delay15_PS_7_10_reg[3] <= 11'b00000000000;
        Delay15_PS_7_10_reg[4] <= 11'b00000000000;
        Delay15_PS_7_10_reg[5] <= 11'b00000000000;
        Delay15_PS_7_10_reg[6] <= 11'b00000000000;
        Delay15_PS_7_10_reg[7] <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay15_PS_7_10_reg[0] <= Delay15_PS_7_10_reg_next[0];
          Delay15_PS_7_10_reg[1] <= Delay15_PS_7_10_reg_next[1];
          Delay15_PS_7_10_reg[2] <= Delay15_PS_7_10_reg_next[2];
          Delay15_PS_7_10_reg[3] <= Delay15_PS_7_10_reg_next[3];
          Delay15_PS_7_10_reg[4] <= Delay15_PS_7_10_reg_next[4];
          Delay15_PS_7_10_reg[5] <= Delay15_PS_7_10_reg_next[5];
          Delay15_PS_7_10_reg[6] <= Delay15_PS_7_10_reg_next[6];
          Delay15_PS_7_10_reg[7] <= Delay15_PS_7_10_reg_next[7];
        end
      end
    end

  assign Delay15_PS_7_10_out1 = Delay15_PS_7_10_reg[7];
  assign Delay15_PS_7_10_reg_next[0] = if_bitconcat_aExponent_aMantiss_out1;
  assign Delay15_PS_7_10_reg_next[1] = Delay15_PS_7_10_reg[0];
  assign Delay15_PS_7_10_reg_next[2] = Delay15_PS_7_10_reg[1];
  assign Delay15_PS_7_10_reg_next[3] = Delay15_PS_7_10_reg[2];
  assign Delay15_PS_7_10_reg_next[4] = Delay15_PS_7_10_reg[3];
  assign Delay15_PS_7_10_reg_next[5] = Delay15_PS_7_10_reg[4];
  assign Delay15_PS_7_10_reg_next[6] = Delay15_PS_7_10_reg[5];
  assign Delay15_PS_7_10_reg_next[7] = Delay15_PS_7_10_reg[6];



  assign if_aExponent_cfType_Exponent_out1 = (Delay18_PS_7_10_out1 == 1'b0 ? if_bitget_Mant_tmp_Mant_tmp_Wor_out1 :
              Delay15_PS_7_10_out1);



  always @(posedge clk or posedge reset)
    begin : Delay7_PS_11_process
      if (reset == 1'b1) begin
        Delay7_PS_11_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay7_PS_11_out1 <= if_aExponent_cfType_Exponent_out1;
        end
      end
    end



  assign mant_a_0_out1 = if_bitconcat_aExponent_aMantiss_1_out1 != 52'h0000000000000;



  assign opp_signs_exp_b_cfType_out1 = bitxor_out1 & exp_b_cfType_Exponent_Inf_o_out1;



  assign alphamant_a_0_opp_signs_out1 = mant_a_0_out1 | opp_signs_exp_b_cfType_out1;



  assign BitSet_out1 = if_bitconcat_aExponent_aMantiss_1_out1 | 52'h8000000000000;



  assign if_mant_a_0_opp_signs_out1 = (alphamant_a_0_opp_signs_out1 == 1'b0 ? if_bitconcat_aExponent_aMantiss_1_out1 :
              BitSet_out1);



  always @(posedge clk or posedge reset)
    begin : Delay2_PS_3_2_process
      if (reset == 1'b1) begin
        Delay2_PS_3_out1_2 <= 52'h0000000000000;
      end
      else begin
        if (enb) begin
          Delay2_PS_3_out1_2 <= if_mant_a_0_opp_signs_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay17_PS_7_10_process
      if (reset == 1'b1) begin
        Delay17_PS_7_10_reg[0] <= 52'h0000000000000;
        Delay17_PS_7_10_reg[1] <= 52'h0000000000000;
        Delay17_PS_7_10_reg[2] <= 52'h0000000000000;
        Delay17_PS_7_10_reg[3] <= 52'h0000000000000;
        Delay17_PS_7_10_reg[4] <= 52'h0000000000000;
        Delay17_PS_7_10_reg[5] <= 52'h0000000000000;
        Delay17_PS_7_10_reg[6] <= 52'h0000000000000;
      end
      else begin
        if (enb) begin
          Delay17_PS_7_10_reg[0] <= Delay17_PS_7_10_reg_next[0];
          Delay17_PS_7_10_reg[1] <= Delay17_PS_7_10_reg_next[1];
          Delay17_PS_7_10_reg[2] <= Delay17_PS_7_10_reg_next[2];
          Delay17_PS_7_10_reg[3] <= Delay17_PS_7_10_reg_next[3];
          Delay17_PS_7_10_reg[4] <= Delay17_PS_7_10_reg_next[4];
          Delay17_PS_7_10_reg[5] <= Delay17_PS_7_10_reg_next[5];
          Delay17_PS_7_10_reg[6] <= Delay17_PS_7_10_reg_next[6];
        end
      end
    end

  assign Delay17_PS_7_10_out1 = Delay17_PS_7_10_reg[6];
  assign Delay17_PS_7_10_reg_next[0] = Delay2_PS_3_out1_2;
  assign Delay17_PS_7_10_reg_next[1] = Delay17_PS_7_10_reg[0];
  assign Delay17_PS_7_10_reg_next[2] = Delay17_PS_7_10_reg[1];
  assign Delay17_PS_7_10_reg_next[3] = Delay17_PS_7_10_reg[2];
  assign Delay17_PS_7_10_reg_next[4] = Delay17_PS_7_10_reg[3];
  assign Delay17_PS_7_10_reg_next[5] = Delay17_PS_7_10_reg[4];
  assign Delay17_PS_7_10_reg_next[6] = Delay17_PS_7_10_reg[5];



  assign if_aExponent_cfType_Exponent_1_out1 = (Delay18_PS_7_10_out1 == 1'b0 ? BitSlice3_out1_1 :
              Delay17_PS_7_10_out1);



  always @(posedge clk or posedge reset)
    begin : Delay8_PS_11_process
      if (reset == 1'b1) begin
        Delay8_PS_11_out1 <= 52'h0000000000000;
      end
      else begin
        if (enb) begin
          Delay8_PS_11_out1 <= if_aExponent_cfType_Exponent_1_out1;
        end
      end
    end



  // Combine FP sign, exponent, mantissa into 64 bit word
  assign nfp_out_pack = {Delay6_PS_11_out1, Delay7_PS_11_out1, Delay8_PS_11_out1};



  assign nfp_out = nfp_out_pack;

endmodule  // nfp_add_double

